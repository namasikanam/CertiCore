#lang rosette

(require
  rackunit
  rackunit/text-ui
  rosette/lib/roseunit
  serval/bpf
  serval/lib/unittest)

(define R0              BPF_REG_0)
(define R1              BPF_REG_1)
(define R2              BPF_REG_2)
(define R3              BPF_REG_3)
(define R4              BPF_REG_4)
(define R5              BPF_REG_5)
(define R6              BPF_REG_6)
(define R7              BPF_REG_7)
(define R8              BPF_REG_8)
(define R9              BPF_REG_9)
(define R10             BPF_REG_10)

(define (cpu_to_be16 x)
  (integer-bytes->integer (integer->integer-bytes x 2 #f #t) #f))

(define (cpu_to_be32 x)
  (integer-bytes->integer (integer->integer-bytes x 4 #f #t) #f))

(define (cpu_to_be64 x)
  (integer-bytes->integer (integer->integer-bytes x 8 #f #t) #f))

(define (cpu_to_le16 x)
  (integer-bytes->integer (integer->integer-bytes x 2 #f #f) #f))

(define (cpu_to_le32 x)
  (integer-bytes->integer (integer->integer-bytes x 4 #f #f) #f))

(define (cpu_to_le64 x)
  (integer-bytes->integer (integer->integer-bytes x 8 #f #f) #f))

(define (run-insns result . insns)
  (define cpu (init-cpu #f))
  (define actual (interpret-program cpu (make-insns insns)))
  (check-equal? actual (bv result 32)))

(define-syntax-rule (bpf-test-case name #:result result ...)
  (test-case+ name (run-insns result ...)))

(define bpf-tests (test-suite+ "Tests for BPF"
  (bpf-test-case "INT: ADD trivial"
    #:result #xfffffffd
    (BPF_ALU64_IMM BPF_MOV R1 1)
    (BPF_ALU64_IMM BPF_ADD R1 2)
    (BPF_ALU64_IMM BPF_MOV R2 3)
    (BPF_ALU64_REG BPF_SUB R1 R2)
    (BPF_ALU64_IMM BPF_ADD R1 -1)
    (BPF_ALU64_IMM BPF_MUL R1 3)
    (BPF_ALU64_REG BPF_MOV R0 R1)
    (BPF_EXIT_INSN))

  (bpf-test-case "INT: MUL_X"
    #:result 1
    (BPF_ALU64_IMM BPF_MOV R0 -1)
    (BPF_ALU64_IMM BPF_MOV R1 -1)
    (BPF_ALU64_IMM BPF_MOV R2 3)
    (BPF_ALU64_REG BPF_MUL R1 R2)
    (BPF_JMP_IMM BPF_JEQ R1 #xfffffffd 1)
    (BPF_EXIT_INSN)
    (BPF_ALU64_IMM BPF_MOV R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "INT: MUL_X2"
    #:result 1
    (BPF_ALU32_IMM BPF_MOV R0 -1)
    (BPF_ALU32_IMM BPF_MOV R1 -1)
    (BPF_ALU32_IMM BPF_MOV R2 3)
    (BPF_ALU64_REG BPF_MUL R1 R2)
    (BPF_ALU64_IMM BPF_RSH R1 8)
    (BPF_JMP_IMM BPF_JEQ R1 #x2ffffff 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "INT: MUL32_X"
    #:result 1
    (BPF_ALU32_IMM BPF_MOV R0 -1)
    (BPF_ALU64_IMM BPF_MOV R1 -1)
    (BPF_ALU32_IMM BPF_MOV R2 3)
    (BPF_ALU32_REG BPF_MUL R1 R2)
    (BPF_ALU64_IMM BPF_RSH R1 8)
    (BPF_JMP_IMM BPF_JEQ R1 #xffffff 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "INT: ADD 64-bit"
    #:result 2957380
    (BPF_ALU64_IMM BPF_MOV R0 0)
    (BPF_ALU64_IMM BPF_MOV R1 1)
    (BPF_ALU64_IMM BPF_MOV R2 2)
    (BPF_ALU64_IMM BPF_MOV R3 3)
    (BPF_ALU64_IMM BPF_MOV R4 4)
    (BPF_ALU64_IMM BPF_MOV R5 5)
    (BPF_ALU64_IMM BPF_MOV R6 6)
    (BPF_ALU64_IMM BPF_MOV R7 7)
    (BPF_ALU64_IMM BPF_MOV R8 8)
    (BPF_ALU64_IMM BPF_MOV R9 9)
    (BPF_ALU64_IMM BPF_ADD R0 20)
    (BPF_ALU64_IMM BPF_ADD R1 20)
    (BPF_ALU64_IMM BPF_ADD R2 20)
    (BPF_ALU64_IMM BPF_ADD R3 20)
    (BPF_ALU64_IMM BPF_ADD R4 20)
    (BPF_ALU64_IMM BPF_ADD R5 20)
    (BPF_ALU64_IMM BPF_ADD R6 20)
    (BPF_ALU64_IMM BPF_ADD R7 20)
    (BPF_ALU64_IMM BPF_ADD R8 20)
    (BPF_ALU64_IMM BPF_ADD R9 20)
    (BPF_ALU64_IMM BPF_SUB R0 10)
    (BPF_ALU64_IMM BPF_SUB R1 10)
    (BPF_ALU64_IMM BPF_SUB R2 10)
    (BPF_ALU64_IMM BPF_SUB R3 10)
    (BPF_ALU64_IMM BPF_SUB R4 10)
    (BPF_ALU64_IMM BPF_SUB R5 10)
    (BPF_ALU64_IMM BPF_SUB R6 10)
    (BPF_ALU64_IMM BPF_SUB R7 10)
    (BPF_ALU64_IMM BPF_SUB R8 10)
    (BPF_ALU64_IMM BPF_SUB R9 10)
    (BPF_ALU64_REG BPF_ADD R0 R0)
    (BPF_ALU64_REG BPF_ADD R0 R1)
    (BPF_ALU64_REG BPF_ADD R0 R2)
    (BPF_ALU64_REG BPF_ADD R0 R3)
    (BPF_ALU64_REG BPF_ADD R0 R4)
    (BPF_ALU64_REG BPF_ADD R0 R5)
    (BPF_ALU64_REG BPF_ADD R0 R6)
    (BPF_ALU64_REG BPF_ADD R0 R7)
    (BPF_ALU64_REG BPF_ADD R0 R8)
    (BPF_ALU64_REG BPF_ADD R0 R9) ; R0 == 155
    (BPF_JMP_IMM BPF_JEQ R0 155 1)
    (BPF_EXIT_INSN)
    (BPF_ALU64_REG BPF_ADD R1 R0)
    (BPF_ALU64_REG BPF_ADD R1 R1)
    (BPF_ALU64_REG BPF_ADD R1 R2)
    (BPF_ALU64_REG BPF_ADD R1 R3)
    (BPF_ALU64_REG BPF_ADD R1 R4)
    (BPF_ALU64_REG BPF_ADD R1 R5)
    (BPF_ALU64_REG BPF_ADD R1 R6)
    (BPF_ALU64_REG BPF_ADD R1 R7)
    (BPF_ALU64_REG BPF_ADD R1 R8)
    (BPF_ALU64_REG BPF_ADD R1 R9) ; R1 == 456
    (BPF_JMP_IMM BPF_JEQ R1 456 1)
    (BPF_EXIT_INSN)
    (BPF_ALU64_REG BPF_ADD R2 R0)
    (BPF_ALU64_REG BPF_ADD R2 R1)
    (BPF_ALU64_REG BPF_ADD R2 R2)
    (BPF_ALU64_REG BPF_ADD R2 R3)
    (BPF_ALU64_REG BPF_ADD R2 R4)
    (BPF_ALU64_REG BPF_ADD R2 R5)
    (BPF_ALU64_REG BPF_ADD R2 R6)
    (BPF_ALU64_REG BPF_ADD R2 R7)
    (BPF_ALU64_REG BPF_ADD R2 R8)
    (BPF_ALU64_REG BPF_ADD R2 R9) ; R2 == 1358
    (BPF_JMP_IMM BPF_JEQ R2 1358 1)
    (BPF_EXIT_INSN)
    (BPF_ALU64_REG BPF_ADD R3 R0)
    (BPF_ALU64_REG BPF_ADD R3 R1)
    (BPF_ALU64_REG BPF_ADD R3 R2)
    (BPF_ALU64_REG BPF_ADD R3 R3)
    (BPF_ALU64_REG BPF_ADD R3 R4)
    (BPF_ALU64_REG BPF_ADD R3 R5)
    (BPF_ALU64_REG BPF_ADD R3 R6)
    (BPF_ALU64_REG BPF_ADD R3 R7)
    (BPF_ALU64_REG BPF_ADD R3 R8)
    (BPF_ALU64_REG BPF_ADD R3 R9) ; R3 == 4063
    (BPF_JMP_IMM BPF_JEQ R3 4063 1)
    (BPF_EXIT_INSN)
    (BPF_ALU64_REG BPF_ADD R4 R0)
    (BPF_ALU64_REG BPF_ADD R4 R1)
    (BPF_ALU64_REG BPF_ADD R4 R2)
    (BPF_ALU64_REG BPF_ADD R4 R3)
    (BPF_ALU64_REG BPF_ADD R4 R4)
    (BPF_ALU64_REG BPF_ADD R4 R5)
    (BPF_ALU64_REG BPF_ADD R4 R6)
    (BPF_ALU64_REG BPF_ADD R4 R7)
    (BPF_ALU64_REG BPF_ADD R4 R8)
    (BPF_ALU64_REG BPF_ADD R4 R9) ; R4 == 12177
    (BPF_JMP_IMM BPF_JEQ R4 12177 1)
    (BPF_EXIT_INSN)
    (BPF_ALU64_REG BPF_ADD R5 R0)
    (BPF_ALU64_REG BPF_ADD R5 R1)
    (BPF_ALU64_REG BPF_ADD R5 R2)
    (BPF_ALU64_REG BPF_ADD R5 R3)
    (BPF_ALU64_REG BPF_ADD R5 R4)
    (BPF_ALU64_REG BPF_ADD R5 R5)
    (BPF_ALU64_REG BPF_ADD R5 R6)
    (BPF_ALU64_REG BPF_ADD R5 R7)
    (BPF_ALU64_REG BPF_ADD R5 R8)
    (BPF_ALU64_REG BPF_ADD R5 R9) ; R5 == 36518
    (BPF_JMP_IMM BPF_JEQ R5 36518 1)
    (BPF_EXIT_INSN)
    (BPF_ALU64_REG BPF_ADD R6 R0)
    (BPF_ALU64_REG BPF_ADD R6 R1)
    (BPF_ALU64_REG BPF_ADD R6 R2)
    (BPF_ALU64_REG BPF_ADD R6 R3)
    (BPF_ALU64_REG BPF_ADD R6 R4)
    (BPF_ALU64_REG BPF_ADD R6 R5)
    (BPF_ALU64_REG BPF_ADD R6 R6)
    (BPF_ALU64_REG BPF_ADD R6 R7)
    (BPF_ALU64_REG BPF_ADD R6 R8)
    (BPF_ALU64_REG BPF_ADD R6 R9) ; R6 == 109540
    (BPF_JMP_IMM BPF_JEQ R6 109540 1)
    (BPF_EXIT_INSN)
    (BPF_ALU64_REG BPF_ADD R7 R0)
    (BPF_ALU64_REG BPF_ADD R7 R1)
    (BPF_ALU64_REG BPF_ADD R7 R2)
    (BPF_ALU64_REG BPF_ADD R7 R3)
    (BPF_ALU64_REG BPF_ADD R7 R4)
    (BPF_ALU64_REG BPF_ADD R7 R5)
    (BPF_ALU64_REG BPF_ADD R7 R6)
    (BPF_ALU64_REG BPF_ADD R7 R7)
    (BPF_ALU64_REG BPF_ADD R7 R8)
    (BPF_ALU64_REG BPF_ADD R7 R9) ; R7 == 328605
    (BPF_JMP_IMM BPF_JEQ R7 328605 1)
    (BPF_EXIT_INSN)
    (BPF_ALU64_REG BPF_ADD R8 R0)
    (BPF_ALU64_REG BPF_ADD R8 R1)
    (BPF_ALU64_REG BPF_ADD R8 R2)
    (BPF_ALU64_REG BPF_ADD R8 R3)
    (BPF_ALU64_REG BPF_ADD R8 R4)
    (BPF_ALU64_REG BPF_ADD R8 R5)
    (BPF_ALU64_REG BPF_ADD R8 R6)
    (BPF_ALU64_REG BPF_ADD R8 R7)
    (BPF_ALU64_REG BPF_ADD R8 R8)
    (BPF_ALU64_REG BPF_ADD R8 R9) ; R8 == 985799
    (BPF_JMP_IMM BPF_JEQ R8 985799 1)
    (BPF_EXIT_INSN)
    (BPF_ALU64_REG BPF_ADD R9 R0)
    (BPF_ALU64_REG BPF_ADD R9 R1)
    (BPF_ALU64_REG BPF_ADD R9 R2)
    (BPF_ALU64_REG BPF_ADD R9 R3)
    (BPF_ALU64_REG BPF_ADD R9 R4)
    (BPF_ALU64_REG BPF_ADD R9 R5)
    (BPF_ALU64_REG BPF_ADD R9 R6)
    (BPF_ALU64_REG BPF_ADD R9 R7)
    (BPF_ALU64_REG BPF_ADD R9 R8)
    (BPF_ALU64_REG BPF_ADD R9 R9) ; R9 == 2957380
    (BPF_ALU64_REG BPF_MOV R0 R9)
    (BPF_EXIT_INSN))

  (bpf-test-case "INT: ADD 32-bit"
    #:result 2957380
    (BPF_ALU32_IMM BPF_MOV R0 20)
    (BPF_ALU32_IMM BPF_MOV R1 1)
    (BPF_ALU32_IMM BPF_MOV R2 2)
    (BPF_ALU32_IMM BPF_MOV R3 3)
    (BPF_ALU32_IMM BPF_MOV R4 4)
    (BPF_ALU32_IMM BPF_MOV R5 5)
    (BPF_ALU32_IMM BPF_MOV R6 6)
    (BPF_ALU32_IMM BPF_MOV R7 7)
    (BPF_ALU32_IMM BPF_MOV R8 8)
    (BPF_ALU32_IMM BPF_MOV R9 9)
    (BPF_ALU64_IMM BPF_ADD R1 10)
    (BPF_ALU64_IMM BPF_ADD R2 10)
    (BPF_ALU64_IMM BPF_ADD R3 10)
    (BPF_ALU64_IMM BPF_ADD R4 10)
    (BPF_ALU64_IMM BPF_ADD R5 10)
    (BPF_ALU64_IMM BPF_ADD R6 10)
    (BPF_ALU64_IMM BPF_ADD R7 10)
    (BPF_ALU64_IMM BPF_ADD R8 10)
    (BPF_ALU64_IMM BPF_ADD R9 10)
    (BPF_ALU32_REG BPF_ADD R0 R1)
    (BPF_ALU32_REG BPF_ADD R0 R2)
    (BPF_ALU32_REG BPF_ADD R0 R3)
    (BPF_ALU32_REG BPF_ADD R0 R4)
    (BPF_ALU32_REG BPF_ADD R0 R5)
    (BPF_ALU32_REG BPF_ADD R0 R6)
    (BPF_ALU32_REG BPF_ADD R0 R7)
    (BPF_ALU32_REG BPF_ADD R0 R8)
    (BPF_ALU32_REG BPF_ADD R0 R9) ; R0 == 155
    (BPF_JMP_IMM BPF_JEQ R0 155 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_REG BPF_ADD R1 R0)
    (BPF_ALU32_REG BPF_ADD R1 R1)
    (BPF_ALU32_REG BPF_ADD R1 R2)
    (BPF_ALU32_REG BPF_ADD R1 R3)
    (BPF_ALU32_REG BPF_ADD R1 R4)
    (BPF_ALU32_REG BPF_ADD R1 R5)
    (BPF_ALU32_REG BPF_ADD R1 R6)
    (BPF_ALU32_REG BPF_ADD R1 R7)
    (BPF_ALU32_REG BPF_ADD R1 R8)
    (BPF_ALU32_REG BPF_ADD R1 R9) ; R1 == 456
    (BPF_JMP_IMM BPF_JEQ R1 456 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_REG BPF_ADD R2 R0)
    (BPF_ALU32_REG BPF_ADD R2 R1)
    (BPF_ALU32_REG BPF_ADD R2 R2)
    (BPF_ALU32_REG BPF_ADD R2 R3)
    (BPF_ALU32_REG BPF_ADD R2 R4)
    (BPF_ALU32_REG BPF_ADD R2 R5)
    (BPF_ALU32_REG BPF_ADD R2 R6)
    (BPF_ALU32_REG BPF_ADD R2 R7)
    (BPF_ALU32_REG BPF_ADD R2 R8)
    (BPF_ALU32_REG BPF_ADD R2 R9) ; R2 == 1358
    (BPF_JMP_IMM BPF_JEQ R2 1358 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_REG BPF_ADD R3 R0)
    (BPF_ALU32_REG BPF_ADD R3 R1)
    (BPF_ALU32_REG BPF_ADD R3 R2)
    (BPF_ALU32_REG BPF_ADD R3 R3)
    (BPF_ALU32_REG BPF_ADD R3 R4)
    (BPF_ALU32_REG BPF_ADD R3 R5)
    (BPF_ALU32_REG BPF_ADD R3 R6)
    (BPF_ALU32_REG BPF_ADD R3 R7)
    (BPF_ALU32_REG BPF_ADD R3 R8)
    (BPF_ALU32_REG BPF_ADD R3 R9) ; R3 == 4063
    (BPF_JMP_IMM BPF_JEQ R3 4063 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_REG BPF_ADD R4 R0)
    (BPF_ALU32_REG BPF_ADD R4 R1)
    (BPF_ALU32_REG BPF_ADD R4 R2)
    (BPF_ALU32_REG BPF_ADD R4 R3)
    (BPF_ALU32_REG BPF_ADD R4 R4)
    (BPF_ALU32_REG BPF_ADD R4 R5)
    (BPF_ALU32_REG BPF_ADD R4 R6)
    (BPF_ALU32_REG BPF_ADD R4 R7)
    (BPF_ALU32_REG BPF_ADD R4 R8)
    (BPF_ALU32_REG BPF_ADD R4 R9) ; R4 == 12177
    (BPF_JMP_IMM BPF_JEQ R4 12177 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_REG BPF_ADD R5 R0)
    (BPF_ALU32_REG BPF_ADD R5 R1)
    (BPF_ALU32_REG BPF_ADD R5 R2)
    (BPF_ALU32_REG BPF_ADD R5 R3)
    (BPF_ALU32_REG BPF_ADD R5 R4)
    (BPF_ALU32_REG BPF_ADD R5 R5)
    (BPF_ALU32_REG BPF_ADD R5 R6)
    (BPF_ALU32_REG BPF_ADD R5 R7)
    (BPF_ALU32_REG BPF_ADD R5 R8)
    (BPF_ALU32_REG BPF_ADD R5 R9) ; R5 == 36518
    (BPF_JMP_IMM BPF_JEQ R5 36518 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_REG BPF_ADD R6 R0)
    (BPF_ALU32_REG BPF_ADD R6 R1)
    (BPF_ALU32_REG BPF_ADD R6 R2)
    (BPF_ALU32_REG BPF_ADD R6 R3)
    (BPF_ALU32_REG BPF_ADD R6 R4)
    (BPF_ALU32_REG BPF_ADD R6 R5)
    (BPF_ALU32_REG BPF_ADD R6 R6)
    (BPF_ALU32_REG BPF_ADD R6 R7)
    (BPF_ALU32_REG BPF_ADD R6 R8)
    (BPF_ALU32_REG BPF_ADD R6 R9) ; R6 == 109540
    (BPF_JMP_IMM BPF_JEQ R6 109540 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_REG BPF_ADD R7 R0)
    (BPF_ALU32_REG BPF_ADD R7 R1)
    (BPF_ALU32_REG BPF_ADD R7 R2)
    (BPF_ALU32_REG BPF_ADD R7 R3)
    (BPF_ALU32_REG BPF_ADD R7 R4)
    (BPF_ALU32_REG BPF_ADD R7 R5)
    (BPF_ALU32_REG BPF_ADD R7 R6)
    (BPF_ALU32_REG BPF_ADD R7 R7)
    (BPF_ALU32_REG BPF_ADD R7 R8)
    (BPF_ALU32_REG BPF_ADD R7 R9) ; R7 == 328605
    (BPF_JMP_IMM BPF_JEQ R7 328605 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_REG BPF_ADD R8 R0)
    (BPF_ALU32_REG BPF_ADD R8 R1)
    (BPF_ALU32_REG BPF_ADD R8 R2)
    (BPF_ALU32_REG BPF_ADD R8 R3)
    (BPF_ALU32_REG BPF_ADD R8 R4)
    (BPF_ALU32_REG BPF_ADD R8 R5)
    (BPF_ALU32_REG BPF_ADD R8 R6)
    (BPF_ALU32_REG BPF_ADD R8 R7)
    (BPF_ALU32_REG BPF_ADD R8 R8)
    (BPF_ALU32_REG BPF_ADD R8 R9) ; R8 == 985799
    (BPF_JMP_IMM BPF_JEQ R8 985799 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_REG BPF_ADD R9 R0)
    (BPF_ALU32_REG BPF_ADD R9 R1)
    (BPF_ALU32_REG BPF_ADD R9 R2)
    (BPF_ALU32_REG BPF_ADD R9 R3)
    (BPF_ALU32_REG BPF_ADD R9 R4)
    (BPF_ALU32_REG BPF_ADD R9 R5)
    (BPF_ALU32_REG BPF_ADD R9 R6)
    (BPF_ALU32_REG BPF_ADD R9 R7)
    (BPF_ALU32_REG BPF_ADD R9 R8)
    (BPF_ALU32_REG BPF_ADD R9 R9) ; R9 == 2957380
    (BPF_ALU32_REG BPF_MOV R0 R9)
    (BPF_EXIT_INSN))

  (bpf-test-case "INT: SUB"
    #:result 11
    (BPF_ALU64_IMM BPF_MOV R0 0)
    (BPF_ALU64_IMM BPF_MOV R1 1)
    (BPF_ALU64_IMM BPF_MOV R2 2)
    (BPF_ALU64_IMM BPF_MOV R3 3)
    (BPF_ALU64_IMM BPF_MOV R4 4)
    (BPF_ALU64_IMM BPF_MOV R5 5)
    (BPF_ALU64_IMM BPF_MOV R6 6)
    (BPF_ALU64_IMM BPF_MOV R7 7)
    (BPF_ALU64_IMM BPF_MOV R8 8)
    (BPF_ALU64_IMM BPF_MOV R9 9)
    (BPF_ALU64_REG BPF_SUB R0 R0)
    (BPF_ALU64_REG BPF_SUB R0 R1)
    (BPF_ALU64_REG BPF_SUB R0 R2)
    (BPF_ALU64_REG BPF_SUB R0 R3)
    (BPF_ALU64_REG BPF_SUB R0 R4)
    (BPF_ALU64_REG BPF_SUB R0 R5)
    (BPF_ALU64_REG BPF_SUB R0 R6)
    (BPF_ALU64_REG BPF_SUB R0 R7)
    (BPF_ALU64_REG BPF_SUB R0 R8)
    (BPF_ALU64_REG BPF_SUB R0 R9)
    (BPF_ALU64_IMM BPF_SUB R0 10)
    (BPF_JMP_IMM BPF_JEQ R0 -55 1)
    (BPF_EXIT_INSN)
    (BPF_ALU64_REG BPF_SUB R1 R0)
    (BPF_ALU64_REG BPF_SUB R1 R2)
    (BPF_ALU64_REG BPF_SUB R1 R3)
    (BPF_ALU64_REG BPF_SUB R1 R4)
    (BPF_ALU64_REG BPF_SUB R1 R5)
    (BPF_ALU64_REG BPF_SUB R1 R6)
    (BPF_ALU64_REG BPF_SUB R1 R7)
    (BPF_ALU64_REG BPF_SUB R1 R8)
    (BPF_ALU64_REG BPF_SUB R1 R9)
    (BPF_ALU64_IMM BPF_SUB R1 10)
    (BPF_ALU64_REG BPF_SUB R2 R0)
    (BPF_ALU64_REG BPF_SUB R2 R1)
    (BPF_ALU64_REG BPF_SUB R2 R3)
    (BPF_ALU64_REG BPF_SUB R2 R4)
    (BPF_ALU64_REG BPF_SUB R2 R5)
    (BPF_ALU64_REG BPF_SUB R2 R6)
    (BPF_ALU64_REG BPF_SUB R2 R7)
    (BPF_ALU64_REG BPF_SUB R2 R8)
    (BPF_ALU64_REG BPF_SUB R2 R9)
    (BPF_ALU64_IMM BPF_SUB R2 10)
    (BPF_ALU64_REG BPF_SUB R3 R0)
    (BPF_ALU64_REG BPF_SUB R3 R1)
    (BPF_ALU64_REG BPF_SUB R3 R2)
    (BPF_ALU64_REG BPF_SUB R3 R4)
    (BPF_ALU64_REG BPF_SUB R3 R5)
    (BPF_ALU64_REG BPF_SUB R3 R6)
    (BPF_ALU64_REG BPF_SUB R3 R7)
    (BPF_ALU64_REG BPF_SUB R3 R8)
    (BPF_ALU64_REG BPF_SUB R3 R9)
    (BPF_ALU64_IMM BPF_SUB R3 10)
    (BPF_ALU64_REG BPF_SUB R4 R0)
    (BPF_ALU64_REG BPF_SUB R4 R1)
    (BPF_ALU64_REG BPF_SUB R4 R2)
    (BPF_ALU64_REG BPF_SUB R4 R3)
    (BPF_ALU64_REG BPF_SUB R4 R5)
    (BPF_ALU64_REG BPF_SUB R4 R6)
    (BPF_ALU64_REG BPF_SUB R4 R7)
    (BPF_ALU64_REG BPF_SUB R4 R8)
    (BPF_ALU64_REG BPF_SUB R4 R9)
    (BPF_ALU64_IMM BPF_SUB R4 10)
    (BPF_ALU64_REG BPF_SUB R5 R0)
    (BPF_ALU64_REG BPF_SUB R5 R1)
    (BPF_ALU64_REG BPF_SUB R5 R2)
    (BPF_ALU64_REG BPF_SUB R5 R3)
    (BPF_ALU64_REG BPF_SUB R5 R4)
    (BPF_ALU64_REG BPF_SUB R5 R6)
    (BPF_ALU64_REG BPF_SUB R5 R7)
    (BPF_ALU64_REG BPF_SUB R5 R8)
    (BPF_ALU64_REG BPF_SUB R5 R9)
    (BPF_ALU64_IMM BPF_SUB R5 10)
    (BPF_ALU64_REG BPF_SUB R6 R0)
    (BPF_ALU64_REG BPF_SUB R6 R1)
    (BPF_ALU64_REG BPF_SUB R6 R2)
    (BPF_ALU64_REG BPF_SUB R6 R3)
    (BPF_ALU64_REG BPF_SUB R6 R4)
    (BPF_ALU64_REG BPF_SUB R6 R5)
    (BPF_ALU64_REG BPF_SUB R6 R7)
    (BPF_ALU64_REG BPF_SUB R6 R8)
    (BPF_ALU64_REG BPF_SUB R6 R9)
    (BPF_ALU64_IMM BPF_SUB R6 10)
    (BPF_ALU64_REG BPF_SUB R7 R0)
    (BPF_ALU64_REG BPF_SUB R7 R1)
    (BPF_ALU64_REG BPF_SUB R7 R2)
    (BPF_ALU64_REG BPF_SUB R7 R3)
    (BPF_ALU64_REG BPF_SUB R7 R4)
    (BPF_ALU64_REG BPF_SUB R7 R5)
    (BPF_ALU64_REG BPF_SUB R7 R6)
    (BPF_ALU64_REG BPF_SUB R7 R8)
    (BPF_ALU64_REG BPF_SUB R7 R9)
    (BPF_ALU64_IMM BPF_SUB R7 10)
    (BPF_ALU64_REG BPF_SUB R8 R0)
    (BPF_ALU64_REG BPF_SUB R8 R1)
    (BPF_ALU64_REG BPF_SUB R8 R2)
    (BPF_ALU64_REG BPF_SUB R8 R3)
    (BPF_ALU64_REG BPF_SUB R8 R4)
    (BPF_ALU64_REG BPF_SUB R8 R5)
    (BPF_ALU64_REG BPF_SUB R8 R6)
    (BPF_ALU64_REG BPF_SUB R8 R7)
    (BPF_ALU64_REG BPF_SUB R8 R9)
    (BPF_ALU64_IMM BPF_SUB R8 10)
    (BPF_ALU64_REG BPF_SUB R9 R0)
    (BPF_ALU64_REG BPF_SUB R9 R1)
    (BPF_ALU64_REG BPF_SUB R9 R2)
    (BPF_ALU64_REG BPF_SUB R9 R3)
    (BPF_ALU64_REG BPF_SUB R9 R4)
    (BPF_ALU64_REG BPF_SUB R9 R5)
    (BPF_ALU64_REG BPF_SUB R9 R6)
    (BPF_ALU64_REG BPF_SUB R9 R7)
    (BPF_ALU64_REG BPF_SUB R9 R8)
    (BPF_ALU64_IMM BPF_SUB R9 10)
    (BPF_ALU64_IMM BPF_SUB R0 10)
    (BPF_ALU64_IMM BPF_NEG R0 0)
    (BPF_ALU64_REG BPF_SUB R0 R1)
    (BPF_ALU64_REG BPF_SUB R0 R2)
    (BPF_ALU64_REG BPF_SUB R0 R3)
    (BPF_ALU64_REG BPF_SUB R0 R4)
    (BPF_ALU64_REG BPF_SUB R0 R5)
    (BPF_ALU64_REG BPF_SUB R0 R6)
    (BPF_ALU64_REG BPF_SUB R0 R7)
    (BPF_ALU64_REG BPF_SUB R0 R8)
    (BPF_ALU64_REG BPF_SUB R0 R9)
    (BPF_EXIT_INSN))

  (bpf-test-case "INT: XOR"
    #:result 1
    (BPF_ALU64_REG BPF_SUB R0 R0)
    (BPF_ALU64_REG BPF_XOR R1 R1)
    (BPF_JMP_REG BPF_JEQ R0 R1 1)
    (BPF_EXIT_INSN)
    (BPF_ALU64_IMM BPF_MOV R0 10)
    (BPF_ALU64_IMM BPF_MOV R1 -1)
    (BPF_ALU64_REG BPF_SUB R1 R1)
    (BPF_ALU64_REG BPF_XOR R2 R2)
    (BPF_JMP_REG BPF_JEQ R1 R2 1)
    (BPF_EXIT_INSN)
    (BPF_ALU64_REG BPF_SUB R2 R2)
    (BPF_ALU64_REG BPF_XOR R3 R3)
    (BPF_ALU64_IMM BPF_MOV R0 10)
    (BPF_ALU64_IMM BPF_MOV R1 -1)
    (BPF_JMP_REG BPF_JEQ R2 R3 1)
    (BPF_EXIT_INSN)
    (BPF_ALU64_REG BPF_SUB R3 R3)
    (BPF_ALU64_REG BPF_XOR R4 R4)
    (BPF_ALU64_IMM BPF_MOV R2 1)
    (BPF_ALU64_IMM BPF_MOV R5 -1)
    (BPF_JMP_REG BPF_JEQ R3 R4 1)
    (BPF_EXIT_INSN)
    (BPF_ALU64_REG BPF_SUB R4 R4)
    (BPF_ALU64_REG BPF_XOR R5 R5)
    (BPF_ALU64_IMM BPF_MOV R3 1)
    (BPF_ALU64_IMM BPF_MOV R7 -1)
    (BPF_JMP_REG BPF_JEQ R5 R4 1)
    (BPF_EXIT_INSN)
    (BPF_ALU64_IMM BPF_MOV R5 1)
    (BPF_ALU64_REG BPF_SUB R5 R5)
    (BPF_ALU64_REG BPF_XOR R6 R6)
    (BPF_ALU64_IMM BPF_MOV R1 1)
    (BPF_ALU64_IMM BPF_MOV R8 -1)
    (BPF_JMP_REG BPF_JEQ R5 R6 1)
    (BPF_EXIT_INSN)
    (BPF_ALU64_REG BPF_SUB R6 R6)
    (BPF_ALU64_REG BPF_XOR R7 R7)
    (BPF_JMP_REG BPF_JEQ R7 R6 1)
    (BPF_EXIT_INSN)
    (BPF_ALU64_REG BPF_SUB R7 R7)
    (BPF_ALU64_REG BPF_XOR R8 R8)
    (BPF_JMP_REG BPF_JEQ R7 R8 1)
    (BPF_EXIT_INSN)
    (BPF_ALU64_REG BPF_SUB R8 R8)
    (BPF_ALU64_REG BPF_XOR R9 R9)
    (BPF_JMP_REG BPF_JEQ R9 R8 1)
    (BPF_EXIT_INSN)
    (BPF_ALU64_REG BPF_SUB R9 R9)
    (BPF_ALU64_REG BPF_XOR R0 R0)
    (BPF_JMP_REG BPF_JEQ R9 R0 1)
    (BPF_EXIT_INSN)
    (BPF_ALU64_REG BPF_SUB R1 R1)
    (BPF_ALU64_REG BPF_XOR R0 R0)
    (BPF_JMP_REG BPF_JEQ R9 R0 2)
    (BPF_ALU64_IMM BPF_MOV R0 0)
    (BPF_EXIT_INSN)
    (BPF_ALU64_IMM BPF_MOV R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "INT: MUL"
    #:result #x35d97ef2
    (BPF_ALU64_IMM BPF_MOV R0 11)
    (BPF_ALU64_IMM BPF_MOV R1 1)
    (BPF_ALU64_IMM BPF_MOV R2 2)
    (BPF_ALU64_IMM BPF_MOV R3 3)
    (BPF_ALU64_IMM BPF_MOV R4 4)
    (BPF_ALU64_IMM BPF_MOV R5 5)
    (BPF_ALU64_IMM BPF_MOV R6 6)
    (BPF_ALU64_IMM BPF_MOV R7 7)
    (BPF_ALU64_IMM BPF_MOV R8 8)
    (BPF_ALU64_IMM BPF_MOV R9 9)
    (BPF_ALU64_REG BPF_MUL R0 R0)
    (BPF_ALU64_REG BPF_MUL R0 R1)
    (BPF_ALU64_REG BPF_MUL R0 R2)
    (BPF_ALU64_REG BPF_MUL R0 R3)
    (BPF_ALU64_REG BPF_MUL R0 R4)
    (BPF_ALU64_REG BPF_MUL R0 R5)
    (BPF_ALU64_REG BPF_MUL R0 R6)
    (BPF_ALU64_REG BPF_MUL R0 R7)
    (BPF_ALU64_REG BPF_MUL R0 R8)
    (BPF_ALU64_REG BPF_MUL R0 R9)
    (BPF_ALU64_IMM BPF_MUL R0 10)
    (BPF_JMP_IMM BPF_JEQ R0 439084800 1)
    (BPF_EXIT_INSN)
    (BPF_ALU64_REG BPF_MUL R1 R0)
    (BPF_ALU64_REG BPF_MUL R1 R2)
    (BPF_ALU64_REG BPF_MUL R1 R3)
    (BPF_ALU64_REG BPF_MUL R1 R4)
    (BPF_ALU64_REG BPF_MUL R1 R5)
    (BPF_ALU64_REG BPF_MUL R1 R6)
    (BPF_ALU64_REG BPF_MUL R1 R7)
    (BPF_ALU64_REG BPF_MUL R1 R8)
    (BPF_ALU64_REG BPF_MUL R1 R9)
    (BPF_ALU64_IMM BPF_MUL R1 10)
    (BPF_ALU64_REG BPF_MOV R2 R1)
    (BPF_ALU64_IMM BPF_RSH R2 32)
    (BPF_JMP_IMM BPF_JEQ R2 #x5a924 1)
    (BPF_EXIT_INSN)
    (BPF_ALU64_IMM BPF_LSH R1 32)
    (BPF_ALU64_IMM BPF_ARSH R1 32)
    (BPF_JMP_IMM BPF_JEQ R1 #xebb90000 1)
    (BPF_EXIT_INSN)
    (BPF_ALU64_REG BPF_MUL R2 R0)
    (BPF_ALU64_REG BPF_MUL R2 R1)
    (BPF_ALU64_REG BPF_MUL R2 R3)
    (BPF_ALU64_REG BPF_MUL R2 R4)
    (BPF_ALU64_REG BPF_MUL R2 R5)
    (BPF_ALU64_REG BPF_MUL R2 R6)
    (BPF_ALU64_REG BPF_MUL R2 R7)
    (BPF_ALU64_REG BPF_MUL R2 R8)
    (BPF_ALU64_REG BPF_MUL R2 R9)
    (BPF_ALU64_IMM BPF_MUL R2 10)
    (BPF_ALU64_IMM BPF_RSH R2 32)
    (BPF_ALU64_REG BPF_MOV R0 R2)
    (BPF_EXIT_INSN))

  (bpf-test-case "MOV REG64"
    #:result #xfefe
    (BPF_LD_IMM64 R0 #xffffffffffffffff)
    (BPF_MOV64_REG R1 R0)
    (BPF_MOV64_REG R2 R1)
    (BPF_MOV64_REG R3 R2)
    (BPF_MOV64_REG R4 R3)
    (BPF_MOV64_REG R5 R4)
    (BPF_MOV64_REG R6 R5)
    (BPF_MOV64_REG R7 R6)
    (BPF_MOV64_REG R8 R7)
    (BPF_MOV64_REG R9 R8)
    (BPF_ALU64_IMM BPF_MOV R0 0)
    (BPF_ALU64_IMM BPF_MOV R1 0)
    (BPF_ALU64_IMM BPF_MOV R2 0)
    (BPF_ALU64_IMM BPF_MOV R3 0)
    (BPF_ALU64_IMM BPF_MOV R4 0)
    (BPF_ALU64_IMM BPF_MOV R5 0)
    (BPF_ALU64_IMM BPF_MOV R6 0)
    (BPF_ALU64_IMM BPF_MOV R7 0)
    (BPF_ALU64_IMM BPF_MOV R8 0)
    (BPF_ALU64_IMM BPF_MOV R9 0)
    (BPF_ALU64_REG BPF_ADD R0 R0)
    (BPF_ALU64_REG BPF_ADD R0 R1)
    (BPF_ALU64_REG BPF_ADD R0 R2)
    (BPF_ALU64_REG BPF_ADD R0 R3)
    (BPF_ALU64_REG BPF_ADD R0 R4)
    (BPF_ALU64_REG BPF_ADD R0 R5)
    (BPF_ALU64_REG BPF_ADD R0 R6)
    (BPF_ALU64_REG BPF_ADD R0 R7)
    (BPF_ALU64_REG BPF_ADD R0 R8)
    (BPF_ALU64_REG BPF_ADD R0 R9)
    (BPF_ALU64_IMM BPF_ADD R0 #xfefe)
    (BPF_EXIT_INSN))

  (bpf-test-case "MOV REG32"
    #:result #xfefe
    (BPF_LD_IMM64 R0 #xffffffffffffffff)
    (BPF_MOV64_REG R1 R0)
    (BPF_MOV64_REG R2 R1)
    (BPF_MOV64_REG R3 R2)
    (BPF_MOV64_REG R4 R3)
    (BPF_MOV64_REG R5 R4)
    (BPF_MOV64_REG R6 R5)
    (BPF_MOV64_REG R7 R6)
    (BPF_MOV64_REG R8 R7)
    (BPF_MOV64_REG R9 R8)
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_ALU32_IMM BPF_MOV R1 0)
    (BPF_ALU32_IMM BPF_MOV R2 0)
    (BPF_ALU32_IMM BPF_MOV R3 0)
    (BPF_ALU32_IMM BPF_MOV R4 0)
    (BPF_ALU32_IMM BPF_MOV R5 0)
    (BPF_ALU32_IMM BPF_MOV R6 0)
    (BPF_ALU32_IMM BPF_MOV R7 0)
    (BPF_ALU32_IMM BPF_MOV R8 0)
    (BPF_ALU32_IMM BPF_MOV R9 0)
    (BPF_ALU64_REG BPF_ADD R0 R0)
    (BPF_ALU64_REG BPF_ADD R0 R1)
    (BPF_ALU64_REG BPF_ADD R0 R2)
    (BPF_ALU64_REG BPF_ADD R0 R3)
    (BPF_ALU64_REG BPF_ADD R0 R4)
    (BPF_ALU64_REG BPF_ADD R0 R5)
    (BPF_ALU64_REG BPF_ADD R0 R6)
    (BPF_ALU64_REG BPF_ADD R0 R7)
    (BPF_ALU64_REG BPF_ADD R0 R8)
    (BPF_ALU64_REG BPF_ADD R0 R9)
    (BPF_ALU64_IMM BPF_ADD R0 #xfefe)
    (BPF_EXIT_INSN))

  (bpf-test-case "LD IMM64"
    #:result #xfefe
    (BPF_LD_IMM64 R0 #xffffffffffffffff)
    (BPF_MOV64_REG R1 R0)
    (BPF_MOV64_REG R2 R1)
    (BPF_MOV64_REG R3 R2)
    (BPF_MOV64_REG R4 R3)
    (BPF_MOV64_REG R5 R4)
    (BPF_MOV64_REG R6 R5)
    (BPF_MOV64_REG R7 R6)
    (BPF_MOV64_REG R8 R7)
    (BPF_MOV64_REG R9 R8)
    (BPF_LD_IMM64 R0 #x0)
    (BPF_LD_IMM64 R1 #x0)
    (BPF_LD_IMM64 R2 #x0)
    (BPF_LD_IMM64 R3 #x0)
    (BPF_LD_IMM64 R4 #x0)
    (BPF_LD_IMM64 R5 #x0)
    (BPF_LD_IMM64 R6 #x0)
    (BPF_LD_IMM64 R7 #x0)
    (BPF_LD_IMM64 R8 #x0)
    (BPF_LD_IMM64 R9 #x0)
    (BPF_ALU64_REG BPF_ADD R0 R0)
    (BPF_ALU64_REG BPF_ADD R0 R1)
    (BPF_ALU64_REG BPF_ADD R0 R2)
    (BPF_ALU64_REG BPF_ADD R0 R3)
    (BPF_ALU64_REG BPF_ADD R0 R4)
    (BPF_ALU64_REG BPF_ADD R0 R5)
    (BPF_ALU64_REG BPF_ADD R0 R6)
    (BPF_ALU64_REG BPF_ADD R0 R7)
    (BPF_ALU64_REG BPF_ADD R0 R8)
    (BPF_ALU64_REG BPF_ADD R0 R9)
    (BPF_ALU64_IMM BPF_ADD R0 #xfefe)
    (BPF_EXIT_INSN))

  (bpf-test-case "INT: ALU MIX"
    #:result -1
    (BPF_ALU64_IMM BPF_MOV R0 11)
    (BPF_ALU64_IMM BPF_ADD R0 -1)
    (BPF_ALU64_IMM BPF_MOV R2 2)
    (BPF_ALU64_IMM BPF_XOR R2 3)
    (BPF_ALU64_REG BPF_DIV R0 R2)
    (BPF_JMP_IMM BPF_JEQ R0 10 1)
    (BPF_EXIT_INSN)
    (BPF_ALU64_IMM BPF_MOD R0 3)
    (BPF_JMP_IMM BPF_JEQ R0 1 1)
    (BPF_EXIT_INSN)
    (BPF_ALU64_IMM BPF_MOV R0 -1)
    (BPF_EXIT_INSN))

  (bpf-test-case "INT: shifts by register"
    #:result -1
    (BPF_MOV64_IMM R0 -1234)
    (BPF_MOV64_IMM R1 1)
    (BPF_ALU32_REG BPF_RSH R0 R1)
    (BPF_JMP_IMM BPF_JEQ R0 #x7ffffd97 1)
    (BPF_EXIT_INSN)
    (BPF_MOV64_IMM R2 1)
    (BPF_ALU64_REG BPF_LSH R0 R2)
    (BPF_MOV32_IMM R4 -1234)
    (BPF_JMP_REG BPF_JEQ R0 R4 1)
    (BPF_EXIT_INSN)
    (BPF_ALU64_IMM BPF_AND R4 63)
    (BPF_ALU64_REG BPF_LSH R0 R4) ; R0 <= 46
    (BPF_MOV64_IMM R3 47)
    (BPF_ALU64_REG BPF_ARSH R0 R3)
    (BPF_JMP_IMM BPF_JEQ R0 -617 1)
    (BPF_EXIT_INSN)
    (BPF_MOV64_IMM R2 1)
    (BPF_ALU64_REG BPF_LSH R4 R2) ; R4 = 46 << 1
    (BPF_JMP_IMM BPF_JEQ R4 92 1)
    (BPF_EXIT_INSN)
    (BPF_MOV64_IMM R4 4)
    (BPF_ALU64_REG BPF_LSH R4 R4) ; R4 = 4 << 4
    (BPF_JMP_IMM BPF_JEQ R4 64 1)
    (BPF_EXIT_INSN)
    (BPF_MOV64_IMM R4 5)
    (BPF_ALU32_REG BPF_LSH R4 R4) ; R4 = 5 << 5
    (BPF_JMP_IMM BPF_JEQ R4 160 1)
    (BPF_EXIT_INSN)
    (BPF_MOV64_IMM R0 -1)
    (BPF_EXIT_INSN))

  (bpf-test-case "load 64-bit immediate"
    #:result 1
    (BPF_LD_IMM64 R1 #x567800001234)
    (BPF_MOV64_REG R2 R1)
    (BPF_MOV64_REG R3 R2)
    (BPF_ALU64_IMM BPF_RSH R2 32)
    (BPF_ALU64_IMM BPF_LSH R3 32)
    (BPF_ALU64_IMM BPF_RSH R3 32)
    (BPF_ALU64_IMM BPF_MOV R0 0)
    (BPF_JMP_IMM BPF_JEQ R2 #x5678 1)
    (BPF_EXIT_INSN)
    (BPF_JMP_IMM BPF_JEQ R3 #x1234 1)
    (BPF_EXIT_INSN)
    (BPF_LD_IMM64 R0 #x1ffffffff)
    (BPF_ALU64_IMM BPF_RSH R0 32) ; R0 = 1
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_MOV_X: dst = 2"
    #:result 2
    (BPF_ALU32_IMM BPF_MOV R1 2)
    (BPF_ALU32_REG BPF_MOV R0 R1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_MOV_X: dst = 4294967295"
    #:result 4294967295
    (BPF_ALU32_IMM BPF_MOV R1 4294967295)
    (BPF_ALU32_REG BPF_MOV R0 R1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_MOV_X: dst = 2"
    #:result 2
    (BPF_ALU32_IMM BPF_MOV R1 2)
    (BPF_ALU64_REG BPF_MOV R0 R1)
    (BPF_EXIT_INSN))

   (bpf-test-case "ALU64_MOV_X: dst = 4294967295"
    #:result 4294967295
    (BPF_ALU32_IMM BPF_MOV R1 4294967295)
    (BPF_ALU64_REG BPF_MOV R0 R1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_MOV_K: dst = 2"
    #:result 2
    (BPF_ALU32_IMM BPF_MOV R0 2)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_MOV_K: dst = 4294967295"
    #:result 4294967295
    (BPF_ALU32_IMM BPF_MOV R0 4294967295)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_MOV_K: #x0000ffffffff0000 = #x00000000ffffffff"
    #:result #x1
    (BPF_LD_IMM64 R2 #x0000ffffffff0000)
    (BPF_LD_IMM64 R3 #x00000000ffffffff)
    (BPF_ALU32_IMM BPF_MOV R2 #xffffffff)
    (BPF_JMP_REG BPF_JEQ R2 R3 2)
    (BPF_MOV32_IMM R0 2)
    (BPF_EXIT_INSN)
    (BPF_MOV32_IMM R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_MOV_K: dst = 2"
    #:result 2
    (BPF_ALU64_IMM BPF_MOV R0 2)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_MOV_K: dst = 2147483647"
    #:result 2147483647
    (BPF_ALU64_IMM BPF_MOV R0 2147483647)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_OR_K: dst = #x0"
    #:result #x1
    (BPF_LD_IMM64 R2 #x0000ffffffff0000)
    (BPF_LD_IMM64 R3 #x0)
    (BPF_ALU64_IMM BPF_MOV R2 #x0)
    (BPF_JMP_REG BPF_JEQ R2 R3 2)
    (BPF_MOV32_IMM R0 2)
    (BPF_EXIT_INSN)
    (BPF_MOV32_IMM R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_MOV_K: dst = -1"
    #:result #x1
    (BPF_LD_IMM64 R2 #x0000ffffffff0000)
    (BPF_LD_IMM64 R3 #xffffffffffffffff)
    (BPF_ALU64_IMM BPF_MOV R2 #xffffffff)
    (BPF_JMP_REG BPF_JEQ R2 R3 2)
    (BPF_MOV32_IMM R0 2)
    (BPF_EXIT_INSN)
    (BPF_MOV32_IMM R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_ADD_X: 1 + 2 = 3"
    #:result 3
    (BPF_LD_IMM64 R0 1)
    (BPF_ALU32_IMM BPF_MOV R1 2)
    (BPF_ALU32_REG BPF_ADD R0 R1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_ADD_X: 1 + 4294967294 = 4294967295"
    #:result 4294967295
    (BPF_LD_IMM64 R0 1)
    (BPF_ALU32_IMM BPF_MOV R1 4294967294)
    (BPF_ALU32_REG BPF_ADD R0 R1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_ADD_X: 2 + 4294967294 = 0"
    #:result 1
    (BPF_LD_IMM64 R0 2)
    (BPF_LD_IMM64 R1 4294967294)
    (BPF_ALU32_REG BPF_ADD R0 R1)
    (BPF_JMP_IMM BPF_JEQ R0 0 2)
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_EXIT_INSN)
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_ADD_X: 1 + 2 = 3"
    #:result 3
    (BPF_LD_IMM64 R0 1)
    (BPF_ALU32_IMM BPF_MOV R1 2)
    (BPF_ALU64_REG BPF_ADD R0 R1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_ADD_X: 1 + 4294967294 = 4294967295"
    #:result 4294967295
    (BPF_LD_IMM64 R0 1)
    (BPF_ALU32_IMM BPF_MOV R1 4294967294)
    (BPF_ALU64_REG BPF_ADD R0 R1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_ADD_X: 2 + 4294967294 = 4294967296"
    #:result 1
    (BPF_LD_IMM64 R0 2)
    (BPF_LD_IMM64 R1 4294967294)
    (BPF_LD_IMM64 R2 4294967296)
    (BPF_ALU64_REG BPF_ADD R0 R1)
    (BPF_JMP_REG BPF_JEQ R0 R2 2)
    (BPF_MOV32_IMM R0 0)
    (BPF_EXIT_INSN)
    (BPF_MOV32_IMM R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_ADD_K: 1 + 2 = 3"
    #:result 3
    (BPF_LD_IMM64 R0 1)
    (BPF_ALU32_IMM BPF_ADD R0 2)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_ADD_K: 3 + 0 = 3"
    #:result 3
    (BPF_LD_IMM64 R0 3)
    (BPF_ALU32_IMM BPF_ADD R0 0)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_ADD_K: 1 + 4294967294 = 4294967295"
    #:result 4294967295
    (BPF_LD_IMM64 R0 1)
    (BPF_ALU32_IMM BPF_ADD R0 4294967294)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_ADD_K: 4294967294 + 2 = 0"
    #:result 1
    (BPF_LD_IMM64 R0 4294967294)
    (BPF_ALU32_IMM BPF_ADD R0 2)
    (BPF_JMP_IMM BPF_JEQ R0 0 2)
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_EXIT_INSN)
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_ADD_K: 0 + (-1) = #x00000000ffffffff"
    #:result #x1
    (BPF_LD_IMM64 R2 #x0)
    (BPF_LD_IMM64 R3 #x00000000ffffffff)
    (BPF_ALU32_IMM BPF_ADD R2 #xffffffff)
    (BPF_JMP_REG BPF_JEQ R2 R3 2)
    (BPF_MOV32_IMM R0 2)
    (BPF_EXIT_INSN)
    (BPF_MOV32_IMM R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_ADD_K: 0 + #xffff = #xffff"
    #:result #x1
    (BPF_LD_IMM64 R2 #x0)
    (BPF_LD_IMM64 R3 #xffff)
    (BPF_ALU32_IMM BPF_ADD R2 #xffff)
    (BPF_JMP_REG BPF_JEQ R2 R3 2)
    (BPF_MOV32_IMM R0 2)
    (BPF_EXIT_INSN)
    (BPF_MOV32_IMM R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_ADD_K: 0 + #x7fffffff = #x7fffffff"
    #:result #x1
    (BPF_LD_IMM64 R2 #x0)
    (BPF_LD_IMM64 R3 #x7fffffff)
    (BPF_ALU32_IMM BPF_ADD R2 #x7fffffff)
    (BPF_JMP_REG BPF_JEQ R2 R3 2)
    (BPF_MOV32_IMM R0 2)
    (BPF_EXIT_INSN)
    (BPF_MOV32_IMM R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_ADD_K: 0 + #x80000000 = #x80000000"
    #:result #x1
    (BPF_LD_IMM64 R2 #x0)
    (BPF_LD_IMM64 R3 #x80000000)
    (BPF_ALU32_IMM BPF_ADD R2 #x80000000)
    (BPF_JMP_REG BPF_JEQ R2 R3 2)
    (BPF_MOV32_IMM R0 2)
    (BPF_EXIT_INSN)
    (BPF_MOV32_IMM R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_ADD_K: 0 + #x80008000 = #x80008000"
    #:result #x1
    (BPF_LD_IMM64 R2 #x0)
    (BPF_LD_IMM64 R3 #x80008000)
    (BPF_ALU32_IMM BPF_ADD R2 #x80008000)
    (BPF_JMP_REG BPF_JEQ R2 R3 2)
    (BPF_MOV32_IMM R0 2)
    (BPF_EXIT_INSN)
    (BPF_MOV32_IMM R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_ADD_K: 1 + 2 = 3"
    #:result 3
    (BPF_LD_IMM64 R0 1)
    (BPF_ALU64_IMM BPF_ADD R0 2)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_ADD_K: 3 + 0 = 3"
    #:result 3
    (BPF_LD_IMM64 R0 3)
    (BPF_ALU64_IMM BPF_ADD R0 0)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_ADD_K: 1 + 2147483646 = 2147483647"
    #:result 2147483647
    (BPF_LD_IMM64 R0 1)
    (BPF_ALU64_IMM BPF_ADD R0 2147483646)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_ADD_K: 4294967294 + 2 = 4294967296"
    #:result 1
    (BPF_LD_IMM64 R0 4294967294)
    (BPF_LD_IMM64 R1 4294967296)
    (BPF_ALU64_IMM BPF_ADD R0 2)
    (BPF_JMP_REG BPF_JEQ R0 R1 2)
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_EXIT_INSN)
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_ADD_K: 2147483646 + -2147483647 = -1"
    #:result -1
    (BPF_LD_IMM64 R0 2147483646)
    (BPF_ALU64_IMM BPF_ADD R0 -2147483647)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_ADD_K: 1 + 0 = 1"
    #:result #x1
    (BPF_LD_IMM64 R2 #x1)
    (BPF_LD_IMM64 R3 #x1)
    (BPF_ALU64_IMM BPF_ADD R2 #x0)
    (BPF_JMP_REG BPF_JEQ R2 R3 2)
    (BPF_MOV32_IMM R0 2)
    (BPF_EXIT_INSN)
    (BPF_MOV32_IMM R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_ADD_K: 0 + (-1) = #xffffffffffffffff"
    #:result #x1
    (BPF_LD_IMM64 R2 #x0)
    (BPF_LD_IMM64 R3 #xffffffffffffffff)
    (BPF_ALU64_IMM BPF_ADD R2 #xffffffff)
    (BPF_JMP_REG BPF_JEQ R2 R3 2)
    (BPF_MOV32_IMM R0 2)
    (BPF_EXIT_INSN)
    (BPF_MOV32_IMM R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_ADD_K: 0 + #xffff = #xffff"
    #:result #x1
    (BPF_LD_IMM64 R2 #x0)
    (BPF_LD_IMM64 R3 #xffff)
    (BPF_ALU64_IMM BPF_ADD R2 #xffff)
    (BPF_JMP_REG BPF_JEQ R2 R3 2)
    (BPF_MOV32_IMM R0 2)
    (BPF_EXIT_INSN)
    (BPF_MOV32_IMM R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_ADD_K: 0 + #x7fffffff = #x7fffffff"
    #:result #x1
    (BPF_LD_IMM64 R2 #x0)
    (BPF_LD_IMM64 R3 #x7fffffff)
    (BPF_ALU64_IMM BPF_ADD R2 #x7fffffff)
    (BPF_JMP_REG BPF_JEQ R2 R3 2)
    (BPF_MOV32_IMM R0 2)
    (BPF_EXIT_INSN)
    (BPF_MOV32_IMM R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_ADD_K: 0 + #x80000000 = #xffffffff80000000"
    #:result #x1
    (BPF_LD_IMM64 R2 #x0)
    (BPF_LD_IMM64 R3 #xffffffff80000000)
    (BPF_ALU64_IMM BPF_ADD R2 #x80000000)
    (BPF_JMP_REG BPF_JEQ R2 R3 2)
    (BPF_MOV32_IMM R0 2)
    (BPF_EXIT_INSN)
    (BPF_MOV32_IMM R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_ADD_K: 0 + #x80008000 = #xffffffff80008000"
    #:result #x1
    (BPF_LD_IMM64 R2 #x0)
    (BPF_LD_IMM64 R3 #xffffffff80008000)
    (BPF_ALU64_IMM BPF_ADD R2 #x80008000)
    (BPF_JMP_REG BPF_JEQ R2 R3 2)
    (BPF_MOV32_IMM R0 2)
    (BPF_EXIT_INSN)
    (BPF_MOV32_IMM R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_SUB_X: 3 - 1 = 2"
    #:result 2
    (BPF_LD_IMM64 R0 3)
    (BPF_ALU32_IMM BPF_MOV R1 1)
    (BPF_ALU32_REG BPF_SUB R0 R1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_SUB_X: 4294967295 - 4294967294 = 1"
    #:result 1
    (BPF_LD_IMM64 R0 4294967295)
    (BPF_ALU32_IMM BPF_MOV R1 4294967294)
    (BPF_ALU32_REG BPF_SUB R0 R1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_SUB_X: 3 - 1 = 2"
    #:result 2
    (BPF_LD_IMM64 R0 3)
    (BPF_ALU32_IMM BPF_MOV R1 1)
    (BPF_ALU64_REG BPF_SUB R0 R1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_SUB_X: 4294967295 - 4294967294 = 1"
    #:result 1
    (BPF_LD_IMM64 R0 4294967295)
    (BPF_ALU32_IMM BPF_MOV R1 4294967294)
    (BPF_ALU64_REG BPF_SUB R0 R1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_SUB_K: 3 - 1 = 2"
    #:result 2
    (BPF_LD_IMM64 R0 3)
    (BPF_ALU32_IMM BPF_SUB R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_SUB_K: 3 - 0 = 3"
    #:result 3
    (BPF_LD_IMM64 R0 3)
    (BPF_ALU32_IMM BPF_SUB R0 0)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_SUB_K: 4294967295 - 4294967294 = 1"
    #:result 1
    (BPF_LD_IMM64 R0 4294967295)
    (BPF_ALU32_IMM BPF_SUB R0 4294967294)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_SUB_K: 3 - 1 = 2"
    #:result 2
    (BPF_LD_IMM64 R0 3)
    (BPF_ALU64_IMM BPF_SUB R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_SUB_K: 3 - 0 = 3"
    #:result 3
    (BPF_LD_IMM64 R0 3)
    (BPF_ALU64_IMM BPF_SUB R0 0)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_SUB_K: 4294967294 - 4294967295 = -1"
    #:result -1
    (BPF_LD_IMM64 R0 4294967294)
    (BPF_ALU64_IMM BPF_SUB R0 4294967295)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_ADD_K: 2147483646 - 2147483647 = -1"
    #:result -1
    (BPF_LD_IMM64 R0 2147483646)
    (BPF_ALU64_IMM BPF_SUB R0 2147483647)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_MUL_X: 2 * 3 = 6"
    #:result 6
    (BPF_LD_IMM64 R0 2)
    (BPF_ALU32_IMM BPF_MOV R1 3)
    (BPF_ALU32_REG BPF_MUL R0 R1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_MUL_X: 2 * #x7FFFFFF8 = #xFFFFFFF0"
    #:result #xFFFFFFF0
    (BPF_LD_IMM64 R0 2)
    (BPF_ALU32_IMM BPF_MOV R1 #x7FFFFFF8)
    (BPF_ALU32_REG BPF_MUL R0 R1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_MUL_X: -1 * -1 = 1"
    #:result 1
    (BPF_LD_IMM64 R0 -1)
    (BPF_ALU32_IMM BPF_MOV R1 -1)
    (BPF_ALU32_REG BPF_MUL R0 R1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_MUL_X: 2 * 3 = 6"
    #:result 6
    (BPF_LD_IMM64 R0 2)
    (BPF_ALU32_IMM BPF_MOV R1 3)
    (BPF_ALU64_REG BPF_MUL R0 R1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_MUL_X: 1 * 2147483647 = 2147483647"
    #:result 2147483647
    (BPF_LD_IMM64 R0 1)
    (BPF_ALU32_IMM BPF_MOV R1 2147483647)
    (BPF_ALU64_REG BPF_MUL R0 R1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_MUL_K: 2 * 3 = 6"
    #:result 6
    (BPF_LD_IMM64 R0 2)
    (BPF_ALU32_IMM BPF_MUL R0 3)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_MUL_K: 3 * 1 = 3"
    #:result 3
    (BPF_LD_IMM64 R0 3)
    (BPF_ALU32_IMM BPF_MUL R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_MUL_K: 2 * #x7FFFFFF8 = #xFFFFFFF0"
    #:result #xFFFFFFF0
    (BPF_LD_IMM64 R0 2)
    (BPF_ALU32_IMM BPF_MUL R0 #x7FFFFFF8)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_MUL_K: 1 * (-1) = #x00000000ffffffff"
    #:result #x1
    (BPF_LD_IMM64 R2 #x1)
    (BPF_LD_IMM64 R3 #x00000000ffffffff)
    (BPF_ALU32_IMM BPF_MUL R2 #xffffffff)
    (BPF_JMP_REG BPF_JEQ R2 R3 2)
    (BPF_MOV32_IMM R0 2)
    (BPF_EXIT_INSN)
    (BPF_MOV32_IMM R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_MUL_K: 2 * 3 = 6"
    #:result 6
    (BPF_LD_IMM64 R0 2)
    (BPF_ALU64_IMM BPF_MUL R0 3)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_MUL_K: 3 * 1 = 3"
    #:result 3
    (BPF_LD_IMM64 R0 3)
    (BPF_ALU64_IMM BPF_MUL R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_MUL_K: 1 * 2147483647 = 2147483647"
    #:result 2147483647
    (BPF_LD_IMM64 R0 1)
    (BPF_ALU64_IMM BPF_MUL R0 2147483647)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_MUL_K: 1 * -2147483647 = -2147483647"
    #:result -2147483647
    (BPF_LD_IMM64 R0 1)
    (BPF_ALU64_IMM BPF_MUL R0 -2147483647)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_MUL_K: 1 * (-1) = #xffffffffffffffff"
    #:result #x1
    (BPF_LD_IMM64 R2 #x1)
    (BPF_LD_IMM64 R3 #xffffffffffffffff)
    (BPF_ALU64_IMM BPF_MUL R2 #xffffffff)
    (BPF_JMP_REG BPF_JEQ R2 R3 2)
    (BPF_MOV32_IMM R0 2)
    (BPF_EXIT_INSN)
    (BPF_MOV32_IMM R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_DIV_X: 6 / 2 = 3"
    #:result 3
    (BPF_LD_IMM64 R0 6)
    (BPF_ALU32_IMM BPF_MOV R1 2)
    (BPF_ALU32_REG BPF_DIV R0 R1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_DIV_X: 4294967295 / 4294967295 = 1"
    #:result 1
    (BPF_LD_IMM64 R0 4294967295)
    (BPF_ALU32_IMM BPF_MOV R1 4294967295)
    (BPF_ALU32_REG BPF_DIV R0 R1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_DIV_X: 6 / 2 = 3"
    #:result 3
    (BPF_LD_IMM64 R0 6)
    (BPF_ALU32_IMM BPF_MOV R1 2)
    (BPF_ALU64_REG BPF_DIV R0 R1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_DIV_X: 2147483647 / 2147483647 = 1"
    #:result 1
    (BPF_LD_IMM64 R0 2147483647)
    (BPF_ALU32_IMM BPF_MOV R1 2147483647)
    (BPF_ALU64_REG BPF_DIV R0 R1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_DIV_X: #xffffffffffffffff / (-1) = #x0000000000000001"
    #:result #x1
    (BPF_LD_IMM64 R2 #xffffffffffffffff)
    (BPF_LD_IMM64 R4 #xffffffffffffffff)
    (BPF_LD_IMM64 R3 #x0000000000000001)
    (BPF_ALU64_REG BPF_DIV R2 R4)
    (BPF_JMP_REG BPF_JEQ R2 R3 2)
    (BPF_MOV32_IMM R0 2)
    (BPF_EXIT_INSN)
    (BPF_MOV32_IMM R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_DIV_K: 6 / 2 = 3"
    #:result 3
    (BPF_LD_IMM64 R0 6)
    (BPF_ALU32_IMM BPF_DIV R0 2)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_DIV_K: 3 / 1 = 3"
    #:result 3
    (BPF_LD_IMM64 R0 3)
    (BPF_ALU32_IMM BPF_DIV R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_DIV_K: 4294967295 / 4294967295 = 1"
    #:result 1
    (BPF_LD_IMM64 R0 4294967295)
    (BPF_ALU32_IMM BPF_DIV R0 4294967295)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_DIV_K: #xffffffffffffffff / (-1) = #x1"
    #:result #x1
    (BPF_LD_IMM64 R2 #xffffffffffffffff)
    (BPF_LD_IMM64 R3 #x1)
    (BPF_ALU32_IMM BPF_DIV R2 #xffffffff)
    (BPF_JMP_REG BPF_JEQ R2 R3 2)
    (BPF_MOV32_IMM R0 2)
    (BPF_EXIT_INSN)
    (BPF_MOV32_IMM R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_DIV_K: 6 / 2 = 3"
    #:result 3
    (BPF_LD_IMM64 R0 6)
    (BPF_ALU64_IMM BPF_DIV R0 2)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_DIV_K: 3 / 1 = 3"
    #:result 3
    (BPF_LD_IMM64 R0 3)
    (BPF_ALU64_IMM BPF_DIV R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_DIV_K: 2147483647 / 2147483647 = 1"
    #:result 1
    (BPF_LD_IMM64 R0 2147483647)
    (BPF_ALU64_IMM BPF_DIV R0 2147483647)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_DIV_K: #xffffffffffffffff / (-1) = #x0000000000000001"
    #:result #x1
    (BPF_LD_IMM64 R2 #xffffffffffffffff)
    (BPF_LD_IMM64 R3 #x0000000000000001)
    (BPF_ALU64_IMM BPF_DIV R2 #xffffffff)
    (BPF_JMP_REG BPF_JEQ R2 R3 2)
    (BPF_MOV32_IMM R0 2)
    (BPF_EXIT_INSN)
    (BPF_MOV32_IMM R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_MOD_X: 3 % 2 = 1"
    #:result 1
    (BPF_LD_IMM64 R0 3)
    (BPF_ALU32_IMM BPF_MOV R1 2)
    (BPF_ALU32_REG BPF_MOD R0 R1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_MOD_X: 4294967295 % 4294967293 = 2"
    #:result 2
    (BPF_LD_IMM64 R0 4294967295)
    (BPF_ALU32_IMM BPF_MOV R1 4294967293)
    (BPF_ALU32_REG BPF_MOD R0 R1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_MOD_X: 3 % 2 = 1"
    #:result 1
    (BPF_LD_IMM64 R0 3)
    (BPF_ALU32_IMM BPF_MOV R1 2)
    (BPF_ALU64_REG BPF_MOD R0 R1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_MOD_X: 2147483647 % 2147483645 = 2"
    #:result 2
    (BPF_LD_IMM64 R0 2147483647)
    (BPF_ALU32_IMM BPF_MOV R1 2147483645)
    (BPF_ALU64_REG BPF_MOD R0 R1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_MOD_K: 3 % 2 = 1"
    #:result 1
    (BPF_LD_IMM64 R0 3)
    (BPF_ALU32_IMM BPF_MOD R0 2)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_MOD_K: 3 % 1 = 0"
    #:result 0
    (BPF_LD_IMM64 R0 3)
    (BPF_ALU32_IMM BPF_MOD R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_MOD_K: 4294967295 % 4294967293 = 2"
    #:result 2
    (BPF_LD_IMM64 R0 4294967295)
    (BPF_ALU32_IMM BPF_MOD R0 4294967293)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_MOD_K: 3 % 2 = 1"
    #:result 1
    (BPF_LD_IMM64 R0 3)
    (BPF_ALU64_IMM BPF_MOD R0 2)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_MOD_K: 3 % 1 = 0"
    #:result 0
    (BPF_LD_IMM64 R0 3)
    (BPF_ALU64_IMM BPF_MOD R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_MOD_K: 2147483647 % 2147483645 = 2"
    #:result 2
    (BPF_LD_IMM64 R0 2147483647)
    (BPF_ALU64_IMM BPF_MOD R0 2147483645)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_AND_X: 3 & 2 = 2"
    #:result 2
    (BPF_LD_IMM64 R0 3)
    (BPF_ALU32_IMM BPF_MOV R1 2)
    (BPF_ALU32_REG BPF_AND R0 R1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_AND_X: #xffffffff & #xffffffff = #xffffffff"
    #:result #xffffffff
    (BPF_LD_IMM64 R0 #xffffffff)
    (BPF_ALU32_IMM BPF_MOV R1 #xffffffff)
    (BPF_ALU32_REG BPF_AND R0 R1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_AND_X: 3 & 2 = 2"
    #:result 2
    (BPF_LD_IMM64 R0 3)
    (BPF_ALU32_IMM BPF_MOV R1 2)
    (BPF_ALU64_REG BPF_AND R0 R1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_AND_X: #xffffffff & #xffffffff = #xffffffff"
    #:result #xffffffff
    (BPF_LD_IMM64 R0 #xffffffff)
    (BPF_ALU32_IMM BPF_MOV R1 #xffffffff)
    (BPF_ALU64_REG BPF_AND R0 R1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_AND_K: 3 & 2 = 2"
    #:result 2
    (BPF_LD_IMM64 R0 3)
    (BPF_ALU32_IMM BPF_AND R0 2)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_AND_K: #xffffffff & #xffffffff = #xffffffff"
    #:result #xffffffff
    (BPF_LD_IMM64 R0 #xffffffff)
    (BPF_ALU32_IMM BPF_AND R0 #xffffffff)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_AND_K: 3 & 2 = 2"
    #:result 2
    (BPF_LD_IMM64 R0 3)
    (BPF_ALU64_IMM BPF_AND R0 2)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_AND_K: #xffffffff & #xffffffff = #xffffffff"
    #:result #xffffffff
    (BPF_LD_IMM64 R0 #xffffffff)
    (BPF_ALU64_IMM BPF_AND R0 #xffffffff)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_AND_K: #x0000ffffffff0000 & #x0 = #x0000ffff00000000"
    #:result #x1
    (BPF_LD_IMM64 R2 #x0000ffffffff0000)
    (BPF_LD_IMM64 R3 #x0000000000000000)
    (BPF_ALU64_IMM BPF_AND R2 #x0)
    (BPF_JMP_REG BPF_JEQ R2 R3 2)
    (BPF_MOV32_IMM R0 2)
    (BPF_EXIT_INSN)
    (BPF_MOV32_IMM R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_AND_K: #x0000ffffffff0000 & -1 = #x0000ffffffffffff"
    #:result #x1
    (BPF_LD_IMM64 R2 #x0000ffffffff0000)
    (BPF_LD_IMM64 R3 #x0000ffffffff0000)
    (BPF_ALU64_IMM BPF_AND R2 #xffffffff)
    (BPF_JMP_REG BPF_JEQ R2 R3 2)
    (BPF_MOV32_IMM R0 2)
    (BPF_EXIT_INSN)
    (BPF_MOV32_IMM R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_AND_K: #xffffffffffffffff & -1 = #xffffffffffffffff"
    #:result #x1
    (BPF_LD_IMM64 R2 #xffffffffffffffff)
    (BPF_LD_IMM64 R3 #xffffffffffffffff)
    (BPF_ALU64_IMM BPF_AND R2 #xffffffff)
    (BPF_JMP_REG BPF_JEQ R2 R3 2)
    (BPF_MOV32_IMM R0 2)
    (BPF_EXIT_INSN)
    (BPF_MOV32_IMM R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_OR_X: 1 | 2 = 3"
    #:result 3
    (BPF_LD_IMM64 R0 1)
    (BPF_ALU32_IMM BPF_MOV R1 2)
    (BPF_ALU32_REG BPF_OR R0 R1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_OR_X: #x0 | #xffffffff = #xffffffff"
    #:result #xffffffff
    (BPF_LD_IMM64 R0 0)
    (BPF_ALU32_IMM BPF_MOV R1 #xffffffff)
    (BPF_ALU32_REG BPF_OR R0 R1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_OR_X: 1 | 2 = 3"
    #:result 3
    (BPF_LD_IMM64 R0 1)
    (BPF_ALU32_IMM BPF_MOV R1 2)
    (BPF_ALU64_REG BPF_OR R0 R1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_OR_X: 0 | #xffffffff = #xffffffff"
    #:result #xffffffff
    (BPF_LD_IMM64 R0 0)
    (BPF_ALU32_IMM BPF_MOV R1 #xffffffff)
    (BPF_ALU64_REG BPF_OR R0 R1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_OR_K: 1 | 2 = 3"
    #:result 3
    (BPF_LD_IMM64 R0 1)
    (BPF_ALU32_IMM BPF_OR R0 2)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_OR_K: 0 & #xffffffff = #xffffffff"
    #:result #xffffffff
    (BPF_LD_IMM64 R0 0)
    (BPF_ALU32_IMM BPF_OR R0 #xffffffff)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_OR_K: 1 | 2 = 3"
    #:result 3
    (BPF_LD_IMM64 R0 1)
    (BPF_ALU64_IMM BPF_OR R0 2)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_OR_K: 0 & #xffffffff = #xffffffff"
    #:result #xffffffff
    (BPF_LD_IMM64 R0 0)
    (BPF_ALU64_IMM BPF_OR R0 #xffffffff)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_OR_K: #x0000ffffffff0000 | #x0 = #x0000ffff00000000"
    #:result #x1
    (BPF_LD_IMM64 R2 #x0000ffffffff0000)
    (BPF_LD_IMM64 R3 #x0000ffffffff0000)
    (BPF_ALU64_IMM BPF_OR R2 #x0)
    (BPF_JMP_REG BPF_JEQ R2 R3 2)
    (BPF_MOV32_IMM R0 2)
    (BPF_EXIT_INSN)
    (BPF_MOV32_IMM R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_OR_K: #x0000ffffffff0000 | -1 = #xffffffffffffffff"
    #:result #x1
    (BPF_LD_IMM64 R2 #x0000ffffffff0000)
    (BPF_LD_IMM64 R3 #xffffffffffffffff)
    (BPF_ALU64_IMM BPF_OR R2 #xffffffff)
    (BPF_JMP_REG BPF_JEQ R2 R3 2)
    (BPF_MOV32_IMM R0 2)
    (BPF_EXIT_INSN)
    (BPF_MOV32_IMM R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_OR_K: #x000000000000000 | -1 = #xffffffffffffffff"
    #:result #x1
    (BPF_LD_IMM64 R2 #x0000000000000000)
    (BPF_LD_IMM64 R3 #xffffffffffffffff)
    (BPF_ALU64_IMM BPF_OR R2 #xffffffff)
    (BPF_JMP_REG BPF_JEQ R2 R3 2)
    (BPF_MOV32_IMM R0 2)
    (BPF_EXIT_INSN)
    (BPF_MOV32_IMM R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_XOR_X: 5 ^ 6 = 3"
    #:result 3
    (BPF_LD_IMM64 R0 5)
    (BPF_ALU32_IMM BPF_MOV R1 6)
    (BPF_ALU32_REG BPF_XOR R0 R1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_XOR_X: #x1 ^ #xffffffff = #xfffffffe"
    #:result #xfffffffe
    (BPF_LD_IMM64 R0 1)
    (BPF_ALU32_IMM BPF_MOV R1 #xffffffff)
    (BPF_ALU32_REG BPF_XOR R0 R1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_XOR_X: 5 ^ 6 = 3"
    #:result 3
    (BPF_LD_IMM64 R0 5)
    (BPF_ALU32_IMM BPF_MOV R1 6)
    (BPF_ALU64_REG BPF_XOR R0 R1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_XOR_X: 1 ^ #xffffffff = #xfffffffe"
    #:result #xfffffffe
    (BPF_LD_IMM64 R0 1)
    (BPF_ALU32_IMM BPF_MOV R1 #xffffffff)
    (BPF_ALU64_REG BPF_XOR R0 R1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_XOR_K: 5 ^ 6 = 3"
    #:result 3
    (BPF_LD_IMM64 R0 5)
    (BPF_ALU32_IMM BPF_XOR R0 6)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_XOR_K: 1 ^ #xffffffff = #xfffffffe"
    #:result #xfffffffe
    (BPF_LD_IMM64 R0 1)
    (BPF_ALU32_IMM BPF_XOR R0 #xffffffff)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_XOR_K: 5 ^ 6 = 3"
    #:result 3
    (BPF_LD_IMM64 R0 5)
    (BPF_ALU64_IMM BPF_XOR R0 6)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_XOR_K: 1 & #xffffffff = #xfffffffe"
    #:result #xfffffffe
    (BPF_LD_IMM64 R0 1)
    (BPF_ALU64_IMM BPF_XOR R0 #xffffffff)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_XOR_K: #x0000ffffffff0000 ^ #x0 = #x0000ffffffff0000"
    #:result #x1
    (BPF_LD_IMM64 R2 #x0000ffffffff0000)
    (BPF_LD_IMM64 R3 #x0000ffffffff0000)
    (BPF_ALU64_IMM BPF_XOR R2 #x0)
    (BPF_JMP_REG BPF_JEQ R2 R3 2)
    (BPF_MOV32_IMM R0 2)
    (BPF_EXIT_INSN)
    (BPF_MOV32_IMM R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_XOR_K: #x0000ffffffff0000 ^ -1 = #xffff00000000ffff"
    #:result #x1
    (BPF_LD_IMM64 R2 #x0000ffffffff0000)
    (BPF_LD_IMM64 R3 #xffff00000000ffff)
    (BPF_ALU64_IMM BPF_XOR R2 #xffffffff)
    (BPF_JMP_REG BPF_JEQ R2 R3 2)
    (BPF_MOV32_IMM R0 2)
    (BPF_EXIT_INSN)
    (BPF_MOV32_IMM R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_XOR_K: #x000000000000000 ^ -1 = #xffffffffffffffff"
    #:result #x1
    (BPF_LD_IMM64 R2 #x0000000000000000)
    (BPF_LD_IMM64 R3 #xffffffffffffffff)
    (BPF_ALU64_IMM BPF_XOR R2 #xffffffff)
    (BPF_JMP_REG BPF_JEQ R2 R3 2)
    (BPF_MOV32_IMM R0 2)
    (BPF_EXIT_INSN)
    (BPF_MOV32_IMM R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_LSH_X: 1 << 1 = 2"
    #:result 2
    (BPF_LD_IMM64 R0 1)
    (BPF_ALU32_IMM BPF_MOV R1 1)
    (BPF_ALU32_REG BPF_LSH R0 R1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_LSH_X: 1 << 31 = #x80000000"
    #:result #x80000000
    (BPF_LD_IMM64 R0 1)
    (BPF_ALU32_IMM BPF_MOV R1 31)
    (BPF_ALU32_REG BPF_LSH R0 R1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_LSH_X: 1 << 1 = 2"
    #:result 2
    (BPF_LD_IMM64 R0 1)
    (BPF_ALU32_IMM BPF_MOV R1 1)
    (BPF_ALU64_REG BPF_LSH R0 R1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_LSH_X: 1 << 31 = #x80000000"
    #:result #x80000000
    (BPF_LD_IMM64 R0 1)
    (BPF_ALU32_IMM BPF_MOV R1 31)
    (BPF_ALU64_REG BPF_LSH R0 R1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_LSH_K: 1 << 1 = 2"
    #:result 2
    (BPF_LD_IMM64 R0 1)
    (BPF_ALU32_IMM BPF_LSH R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_LSH_K: 1 << 31 = #x80000000"
    #:result #x80000000
    (BPF_LD_IMM64 R0 1)
    (BPF_ALU32_IMM BPF_LSH R0 31)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_LSH_K: 1 << 1 = 2"
    #:result 2
    (BPF_LD_IMM64 R0 1)
    (BPF_ALU64_IMM BPF_LSH R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_LSH_K: 1 << 31 = #x80000000"
    #:result #x80000000
    (BPF_LD_IMM64 R0 1)
    (BPF_ALU64_IMM BPF_LSH R0 31)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_RSH_X: 2 >> 1 = 1"
    #:result 1
    (BPF_LD_IMM64 R0 2)
    (BPF_ALU32_IMM BPF_MOV R1 1)
    (BPF_ALU32_REG BPF_RSH R0 R1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_RSH_X: #x80000000 >> 31 = 1"
    #:result 1
    (BPF_LD_IMM64 R0 #x80000000)
    (BPF_ALU32_IMM BPF_MOV R1 31)
    (BPF_ALU32_REG BPF_RSH R0 R1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_RSH_X: 2 >> 1 = 1"
    #:result 1
    (BPF_LD_IMM64 R0 2)
    (BPF_ALU32_IMM BPF_MOV R1 1)
    (BPF_ALU64_REG BPF_RSH R0 R1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_RSH_X: #x80000000 >> 31 = 1"
    #:result 1
    (BPF_LD_IMM64 R0 #x80000000)
    (BPF_ALU32_IMM BPF_MOV R1 31)
    (BPF_ALU64_REG BPF_RSH R0 R1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_RSH_K: 2 >> 1 = 1"
    #:result 1
    (BPF_LD_IMM64 R0 2)
    (BPF_ALU32_IMM BPF_RSH R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_RSH_K: #x80000000 >> 31 = 1"
    #:result 1
    (BPF_LD_IMM64 R0 #x80000000)
    (BPF_ALU32_IMM BPF_RSH R0 31)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_RSH_K: 2 >> 1 = 1"
    #:result 1
    (BPF_LD_IMM64 R0 2)
    (BPF_ALU64_IMM BPF_RSH R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_RSH_K: #x80000000 >> 31 = 1"
    #:result 1
    (BPF_LD_IMM64 R0 #x80000000)
    (BPF_ALU64_IMM BPF_RSH R0 31)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_ARSH_X: #xff00ff0000000000 >> 40 = #xffffffffffff00ff"
    #:result #xffff00ff
    (BPF_LD_IMM64 R0 #xff00ff0000000000)
    (BPF_ALU32_IMM BPF_MOV R1 40)
    (BPF_ALU64_REG BPF_ARSH R0 R1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_ARSH_K: #xff00ff0000000000 >> 40 = #xffffffffffff00ff"
    #:result #xffff00ff
    (BPF_LD_IMM64 R0 #xff00ff0000000000)
    (BPF_ALU64_IMM BPF_ARSH R0 40)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_NEG: -(3) = -3"
    #:result -3
    (BPF_ALU32_IMM BPF_MOV R0 3)
    (BPF_ALU32_IMM BPF_NEG R0 0)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_NEG: -(-3) = 3"
    #:result 3
    (BPF_ALU32_IMM BPF_MOV R0 -3)
    (BPF_ALU32_IMM BPF_NEG R0 0)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_NEG: -(3) = -3"
    #:result -3
    (BPF_LD_IMM64 R0 3)
    (BPF_ALU64_IMM BPF_NEG R0 0)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU64_NEG: -(-3) = 3"
    #:result 3
    (BPF_LD_IMM64 R0 -3)
    (BPF_ALU64_IMM BPF_NEG R0 0)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_END_FROM_BE 16: #x0123456789abcdef -> #xcdef"
    #:result (cpu_to_be16 #xcdef)
    (BPF_LD_IMM64 R0 #x0123456789abcdef)
    (BPF_ENDIAN BPF_FROM_BE R0 16)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_END_FROM_BE 32: #x0123456789abcdef -> #x89abcdef"
    #:result (cpu_to_be32 #x89abcdef)
    (BPF_LD_IMM64 R0 #x0123456789abcdef)
    (BPF_ENDIAN BPF_FROM_BE R0 32)
    (BPF_ALU64_REG BPF_MOV R1 R0)
    (BPF_ALU64_IMM BPF_RSH R1 32)
    (BPF_ALU32_REG BPF_ADD R0 R1) ; R1 = 0
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_END_FROM_BE 64: #x0123456789abcdef -> #x89abcdef"
    #:result (bitwise-and (cpu_to_be64 #x0123456789abcdef) #xffffffff)
    (BPF_LD_IMM64 R0 #x0123456789abcdef)
    (BPF_ENDIAN BPF_FROM_BE R0 64)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_END_FROM_LE 16: #x0123456789abcdef -> #xefcd"
    #:result (cpu_to_le16 #xcdef)
    (BPF_LD_IMM64 R0 #x0123456789abcdef)
    (BPF_ENDIAN BPF_FROM_LE R0 16)
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_END_FROM_LE 32: #x0123456789abcdef -> #xefcdab89"
    #:result (cpu_to_le32 #x89abcdef)
    (BPF_LD_IMM64 R0 #x0123456789abcdef)
    (BPF_ENDIAN BPF_FROM_LE R0 32)
    (BPF_ALU64_REG BPF_MOV R1 R0)
    (BPF_ALU64_IMM BPF_RSH R1 32)
    (BPF_ALU32_REG BPF_ADD R0 R1) ; R1 = 0
    (BPF_EXIT_INSN))

  (bpf-test-case "ALU_END_FROM_LE 64: #x0123456789abcdef -> #x67452301"
    #:result (bitwise-and (cpu_to_le64 #x0123456789abcdef) #xffffffff)
    (BPF_LD_IMM64 R0 #x0123456789abcdef)
    (BPF_ENDIAN BPF_FROM_LE R0 64)
    (BPF_EXIT_INSN))

  (bpf-test-case "ST_MEM_B: Store/Load byte: max negative"
    #:result #xff
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_ST_MEM BPF_B R10 -40 #xff)
    (BPF_LDX_MEM BPF_B R0 R10 -40)
    (BPF_EXIT_INSN))

  (bpf-test-case "ST_MEM_B: Store/Load byte: max positive"
    #:result #x7f
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_ST_MEM BPF_H R10 -40 #x7f)
    (BPF_LDX_MEM BPF_H R0 R10 -40)
    (BPF_EXIT_INSN))

  (bpf-test-case "STX_MEM_B: Store/Load byte: max negative"
    #:result #xff
    (BPF_LD_IMM64 R0 0)
    (BPF_LD_IMM64 R1 #xff)
    (BPF_STX_MEM BPF_B R10 R1 -40)
    (BPF_LDX_MEM BPF_B R0 R10 -40)
    (BPF_EXIT_INSN))

  (bpf-test-case "ST_MEM_H: Store/Load half word: max negative"
    #:result #xffff
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_ST_MEM BPF_H R10 -40 #xffff)
    (BPF_LDX_MEM BPF_H R0 R10 -40)
    (BPF_EXIT_INSN))

  (bpf-test-case "ST_MEM_H: Store/Load half word: max positive"
    #:result #x7fff
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_ST_MEM BPF_H R10 -40 #x7fff)
    (BPF_LDX_MEM BPF_H R0 R10 -40)
    (BPF_EXIT_INSN))

  (bpf-test-case "STX_MEM_H: Store/Load half word: max negative"
    #:result #xffff
    (BPF_LD_IMM64 R0 0)
    (BPF_LD_IMM64 R1 #xffff)
    (BPF_STX_MEM BPF_H R10 R1 -40)
    (BPF_LDX_MEM BPF_H R0 R10 -40)
    (BPF_EXIT_INSN))

  (bpf-test-case "ST_MEM_W: Store/Load word: max negative"
    #:result #xffffffff
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_ST_MEM BPF_W R10 -40 #xffffffff)
    (BPF_LDX_MEM BPF_W R0 R10 -40)
    (BPF_EXIT_INSN))

  (bpf-test-case "ST_MEM_W: Store/Load word: max positive"
    #:result #x7fffffff
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_ST_MEM BPF_W R10 -40 #x7fffffff)
    (BPF_LDX_MEM BPF_W R0 R10 -40)
    (BPF_EXIT_INSN))

  (bpf-test-case "STX_MEM_W: Store/Load word: max negative"
    #:result #xffffffff
    (BPF_LD_IMM64 R0 0)
    (BPF_LD_IMM64 R1 #xffffffff)
    (BPF_STX_MEM BPF_W R10 R1 -40)
    (BPF_LDX_MEM BPF_W R0 R10 -40)
    (BPF_EXIT_INSN))

  (bpf-test-case "ST_MEM_DW: Store/Load double word: max negative"
    #:result #xffffffff
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_ST_MEM BPF_DW R10 -40 #xffffffff)
    (BPF_LDX_MEM BPF_DW R0 R10 -40)
    (BPF_EXIT_INSN))

  (bpf-test-case "ST_MEM_DW: Store/Load double word: max negative 2"
    #:result #x1
    (BPF_LD_IMM64 R2 #xffff00000000ffff)
    (BPF_LD_IMM64 R3 #xffffffffffffffff)
    (BPF_ST_MEM BPF_DW R10 -40 #xffffffff)
    (BPF_LDX_MEM BPF_DW R2 R10 -40)
    (BPF_JMP_REG BPF_JEQ R2 R3 2)
    (BPF_MOV32_IMM R0 2)
    (BPF_EXIT_INSN)
    (BPF_MOV32_IMM R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "ST_MEM_DW: Store/Load double word: max positive"
    #:result #x7fffffff
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_ST_MEM BPF_DW R10 -40 #x7fffffff)
    (BPF_LDX_MEM BPF_DW R0 R10 -40)
    (BPF_EXIT_INSN))

  (bpf-test-case "STX_MEM_DW: Store/Load double word: max negative"
    #:result #xffffffff
    (BPF_LD_IMM64 R0 0)
    (BPF_LD_IMM64 R1 #xffffffffffffffff)
    (BPF_STX_MEM BPF_W R10 R1 -40)
    (BPF_LDX_MEM BPF_W R0 R10 -40)
    (BPF_EXIT_INSN))

  (bpf-test-case "STX_XADD_W: Test: #x12 + #x10 = #x22"
    #:result #x22
    (BPF_ALU32_IMM BPF_MOV R0 #x12)
    (BPF_ST_MEM BPF_W R10 -40 #x10)
    (BPF_STX_XADD BPF_W R10 R0 -40)
    (BPF_LDX_MEM BPF_W R0 R10 -40)
    (BPF_EXIT_INSN))

  (bpf-test-case "STX_XADD_W: Test side-effects r10: #x12 + #x10 = #x22"
    #:result 0
    (BPF_ALU64_REG BPF_MOV R1 R10)
    (BPF_ALU32_IMM BPF_MOV R0 #x12)
    (BPF_ST_MEM BPF_W R10 -40 #x10)
    (BPF_STX_XADD BPF_W R10 R0 -40)
    (BPF_ALU64_REG BPF_MOV R0 R10)
    (BPF_ALU64_REG BPF_SUB R0 R1)
    (BPF_EXIT_INSN))

  (bpf-test-case "STX_XADD_W: Test side-effects r0: #x12 + #x10 = #x22"
    #:result #x12
    (BPF_ALU32_IMM BPF_MOV R0 #x12)
    (BPF_ST_MEM BPF_W R10 -40 #x10)
    (BPF_STX_XADD BPF_W R10 R0 -40)
    (BPF_EXIT_INSN))

  (bpf-test-case "STX_XADD_DW: Test side-effects r10: #x12 + #x10 = #x22"
    #:result 0
    (BPF_ALU64_REG BPF_MOV R1 R10)
    (BPF_ALU32_IMM BPF_MOV R0 #x12)
    (BPF_ST_MEM BPF_DW R10 -40 #x10)
    (BPF_STX_XADD BPF_DW R10 R0 -40)
    (BPF_ALU64_REG BPF_MOV R0 R10)
    (BPF_ALU64_REG BPF_SUB R0 R1)
    (BPF_EXIT_INSN))

  (bpf-test-case "STX_XADD_DW: Test side-effects r0: #x12 + #x10 = #x22"
    #:result #x12
    (BPF_ALU32_IMM BPF_MOV R0 #x12)
    (BPF_ST_MEM BPF_DW R10 -40 #x10)
    (BPF_STX_XADD BPF_DW R10 R0 -40)
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JA: Unconditional jump: if (true) return 1"
    #:result 1
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_JMP_IMM BPF_JA 0 0 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JSLT_K: Signed jump: if (-2 < -1) return 1"
    #:result 1
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_LD_IMM64 R1 #xfffffffffffffffe)
    (BPF_JMP_IMM BPF_JSLT R1 -1 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JSLT_K: Signed jump: if (-1 < -1) return 0"
    #:result 1
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_LD_IMM64 R1 #xffffffffffffffff)
    (BPF_JMP_IMM BPF_JSLT R1 -1 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JSGT_K: Signed jump: if (-1 > -2) return 1"
    #:result 1
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_LD_IMM64 R1 #xffffffffffffffff)
    (BPF_JMP_IMM BPF_JSGT R1 -2 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JSGT_K: Signed jump: if (-1 > -1) return 0"
    #:result 1
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_LD_IMM64 R1 #xffffffffffffffff)
    (BPF_JMP_IMM BPF_JSGT R1 -1 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JSLE_K: Signed jump: if (-2 <= -1) return 1"
    #:result 1
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_LD_IMM64 R1 #xfffffffffffffffe)
    (BPF_JMP_IMM BPF_JSLE R1 -1 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JSLE_K: Signed jump: if (-1 <= -1) return 1"
    #:result 1
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_LD_IMM64 R1 #xffffffffffffffff)
    (BPF_JMP_IMM BPF_JSLE R1 -1 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JSLE_K: Signed jump: value walk 1"
    #:result 1
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_LD_IMM64 R1 3)
    (BPF_JMP_IMM BPF_JSLE R1 0 6)
    (BPF_ALU64_IMM BPF_SUB R1 1)
    (BPF_JMP_IMM BPF_JSLE R1 0 4)
    (BPF_ALU64_IMM BPF_SUB R1 1)
    (BPF_JMP_IMM BPF_JSLE R1 0 2)
    (BPF_ALU64_IMM BPF_SUB R1 1)
    (BPF_JMP_IMM BPF_JSLE R1 0 1)
    (BPF_EXIT_INSN)    ; bad exit
    (BPF_ALU32_IMM BPF_MOV R0 1)  ; good exit
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JSLE_K: Signed jump: value walk 2"
    #:result 1
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_LD_IMM64 R1 3)
    (BPF_JMP_IMM BPF_JSLE R1 0 4)
    (BPF_ALU64_IMM BPF_SUB R1 2)
    (BPF_JMP_IMM BPF_JSLE R1 0 2)
    (BPF_ALU64_IMM BPF_SUB R1 2)
    (BPF_JMP_IMM BPF_JSLE R1 0 1)
    (BPF_EXIT_INSN)    ; bad exit
    (BPF_ALU32_IMM BPF_MOV R0 1)  ; good exit
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JSGE_K: Signed jump: if (-1 >= -2) return 1"
    #:result 1
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_LD_IMM64 R1 #xffffffffffffffff)
    (BPF_JMP_IMM BPF_JSGE R1 -2 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JSGE_K: Signed jump: if (-1 >= -1) return 1"
    #:result 1
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_LD_IMM64 R1 #xffffffffffffffff)
    (BPF_JMP_IMM BPF_JSGE R1 -1 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JSGE_K: Signed jump: value walk 1"
    #:result 1
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_LD_IMM64 R1 -3)
    (BPF_JMP_IMM BPF_JSGE R1 0 6)
    (BPF_ALU64_IMM BPF_ADD R1 1)
    (BPF_JMP_IMM BPF_JSGE R1 0 4)
    (BPF_ALU64_IMM BPF_ADD R1 1)
    (BPF_JMP_IMM BPF_JSGE R1 0 2)
    (BPF_ALU64_IMM BPF_ADD R1 1)
    (BPF_JMP_IMM BPF_JSGE R1 0 1)
    (BPF_EXIT_INSN)    ; bad exit
    (BPF_ALU32_IMM BPF_MOV R0 1)  ; good exit
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JSGE_K: Signed jump: value walk 2"
    #:result 1
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_LD_IMM64 R1 -3)
    (BPF_JMP_IMM BPF_JSGE R1 0 4)
    (BPF_ALU64_IMM BPF_ADD R1 2)
    (BPF_JMP_IMM BPF_JSGE R1 0 2)
    (BPF_ALU64_IMM BPF_ADD R1 2)
    (BPF_JMP_IMM BPF_JSGE R1 0 1)
    (BPF_EXIT_INSN)    ; bad exit
    (BPF_ALU32_IMM BPF_MOV R0 1)  ; good exit
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JGT_K: if (3 > 2) return 1"
    #:result 1
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_LD_IMM64 R1 3)
    (BPF_JMP_IMM BPF_JGT R1 2 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JGT_K: Unsigned jump: if (-1 > 1) return 1"
    #:result 1
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_LD_IMM64 R1 -1)
    (BPF_JMP_IMM BPF_JGT R1 1 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JLT_K: if (2 < 3) return 1"
    #:result 1
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_LD_IMM64 R1 2)
    (BPF_JMP_IMM BPF_JLT R1 3 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JGT_K: Unsigned jump: if (1 < -1) return 1"
    #:result 1
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_LD_IMM64 R1 1)
    (BPF_JMP_IMM BPF_JLT R1 -1 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JGE_K: if (3 >= 2) return 1"
    #:result 1
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_LD_IMM64 R1 3)
    (BPF_JMP_IMM BPF_JGE R1 2 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JLE_K: if (2 <= 3) return 1"
    #:result 1
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_LD_IMM64 R1 2)
    (BPF_JMP_IMM BPF_JLE R1 3 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JGT_K: if (3 > 2) return 1 (jump backwards)"
    #:result 1
    (BPF_JMP_IMM BPF_JA 0 0 2) ; goto start
    (BPF_ALU32_IMM BPF_MOV R0 1) ; out:
    (BPF_EXIT_INSN)
    (BPF_ALU32_IMM BPF_MOV R0 0) ; start:
    (BPF_LD_IMM64 R1 3) ; note: this takes 2 insns
    (BPF_JMP_IMM BPF_JGT R1 2 -6) ; goto out
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JGE_K: if (3 >= 3) return 1"
    #:result 1
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_LD_IMM64 R1 3)
    (BPF_JMP_IMM BPF_JGE R1 3 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JGT_K: if (2 < 3) return 1 (jump backwards)"
    #:result 1
    (BPF_JMP_IMM BPF_JA 0 0 2) ; goto start
    (BPF_ALU32_IMM BPF_MOV R0 1) ; out:
    (BPF_EXIT_INSN)
    (BPF_ALU32_IMM BPF_MOV R0 0) ; start:
    (BPF_LD_IMM64 R1 2) ; note: this takes 2 insns
    (BPF_JMP_IMM BPF_JLT R1 3 -6) ; goto out
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JLE_K: if (3 <= 3) return 1"
    #:result 1
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_LD_IMM64 R1 3)
    (BPF_JMP_IMM BPF_JLE R1 3 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JNE_K: if (3 != 2) return 1"
    #:result 1
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_LD_IMM64 R1 3)
    (BPF_JMP_IMM BPF_JNE R1 2 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JEQ_K: if (3 == 3) return 1"
    #:result 1
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_LD_IMM64 R1 3)
    (BPF_JMP_IMM BPF_JEQ R1 3 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JSET_K: if (#x3 & #x2) return 1"
    #:result 1
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_LD_IMM64 R1 3)
    (BPF_JMP_IMM BPF_JSET R1 2 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JSET_K: if (#x3 & #xffffffff) return 1"
    #:result 1
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_LD_IMM64 R1 3)
    (BPF_JMP_IMM BPF_JSET R1 #xffffffff 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JSGT_X: Signed jump: if (-1 > -2) return 1"
    #:result 1
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_LD_IMM64 R1 -1)
    (BPF_LD_IMM64 R2 -2)
    (BPF_JMP_REG BPF_JSGT R1 R2 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JSGT_X: Signed jump: if (-1 > -1) return 0"
    #:result 1
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_LD_IMM64 R1 -1)
    (BPF_LD_IMM64 R2 -1)
    (BPF_JMP_REG BPF_JSGT R1 R2 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JSLT_X: Signed jump: if (-2 < -1) return 1"
    #:result 1
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_LD_IMM64 R1 -1)
    (BPF_LD_IMM64 R2 -2)
    (BPF_JMP_REG BPF_JSLT R2 R1 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JSLT_X: Signed jump: if (-1 < -1) return 0"
    #:result 1
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_LD_IMM64 R1 -1)
    (BPF_LD_IMM64 R2 -1)
    (BPF_JMP_REG BPF_JSLT R1 R2 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JSGE_X: Signed jump: if (-1 >= -2) return 1"
    #:result 1
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_LD_IMM64 R1 -1)
    (BPF_LD_IMM64 R2 -2)
    (BPF_JMP_REG BPF_JSGE R1 R2 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JSGE_X: Signed jump: if (-1 >= -1) return 1"
    #:result 1
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_LD_IMM64 R1 -1)
    (BPF_LD_IMM64 R2 -1)
    (BPF_JMP_REG BPF_JSGE R1 R2 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JSLE_X: Signed jump: if (-2 <= -1) return 1"
    #:result 1
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_LD_IMM64 R1 -1)
    (BPF_LD_IMM64 R2 -2)
    (BPF_JMP_REG BPF_JSLE R2 R1 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JSLE_X: Signed jump: if (-1 <= -1) return 1"
    #:result 1
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_LD_IMM64 R1 -1)
    (BPF_LD_IMM64 R2 -1)
    (BPF_JMP_REG BPF_JSLE R1 R2 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JGT_X: if (3 > 2) return 1"
    #:result 1
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_LD_IMM64 R1 3)
    (BPF_LD_IMM64 R2 2)
    (BPF_JMP_REG BPF_JGT R1 R2 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JGT_X: Unsigned jump: if (-1 > 1) return 1"
    #:result 1
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_LD_IMM64 R1 -1)
    (BPF_LD_IMM64 R2 1)
    (BPF_JMP_REG BPF_JGT R1 R2 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JLT_X: if (2 < 3) return 1"
    #:result 1
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_LD_IMM64 R1 3)
    (BPF_LD_IMM64 R2 2)
    (BPF_JMP_REG BPF_JLT R2 R1 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JLT_X: Unsigned jump: if (1 < -1) return 1"
    #:result 1
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_LD_IMM64 R1 -1)
    (BPF_LD_IMM64 R2 1)
    (BPF_JMP_REG BPF_JLT R2 R1 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JGE_X: if (3 >= 2) return 1"
    #:result 1
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_LD_IMM64 R1 3)
    (BPF_LD_IMM64 R2 2)
    (BPF_JMP_REG BPF_JGE R1 R2 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JGE_X: if (3 >= 3) return 1"
    #:result 1
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_LD_IMM64 R1 3)
    (BPF_LD_IMM64 R2 3)
    (BPF_JMP_REG BPF_JGE R1 R2 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JLE_X: if (2 <= 3) return 1"
    #:result 1
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_LD_IMM64 R1 3)
    (BPF_LD_IMM64 R2 2)
    (BPF_JMP_REG BPF_JLE R2 R1 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JLE_X: if (3 <= 3) return 1"
    #:result 1
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_LD_IMM64 R1 3)
    (BPF_LD_IMM64 R2 3)
    (BPF_JMP_REG BPF_JLE R1 R2 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JGE_X: ldimm64 test 1"
    #:result #xeeeeeeee
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_LD_IMM64 R1 3)
    (BPF_LD_IMM64 R2 2)
    (BPF_JMP_REG BPF_JGE R1 R2 2)
    (BPF_LD_IMM64 R0 #xffffffffffffffff)
    (BPF_LD_IMM64 R0 #xeeeeeeeeeeeeeeee)
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JGE_X: ldimm64 test 2"
    #:result #xffffffff
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_LD_IMM64 R1 3)
    (BPF_LD_IMM64 R2 2)
    (BPF_JMP_REG BPF_JGE R1 R2 0)
    (BPF_LD_IMM64 R0 #xffffffffffffffff)
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JGE_X: ldimm64 test 3"
    #:result 1
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_LD_IMM64 R1 3)
    (BPF_LD_IMM64 R2 2)
    (BPF_JMP_REG BPF_JGE R1 R2 4)
    (BPF_LD_IMM64 R0 #xffffffffffffffff)
    (BPF_LD_IMM64 R0 #xeeeeeeeeeeeeeeee)
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JLE_X: ldimm64 test 1"
    #:result #xeeeeeeee
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_LD_IMM64 R1 3)
    (BPF_LD_IMM64 R2 2)
    (BPF_JMP_REG BPF_JLE R2 R1 2)
    (BPF_LD_IMM64 R0 #xffffffffffffffff)
    (BPF_LD_IMM64 R0 #xeeeeeeeeeeeeeeee)
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JLE_X: ldimm64 test 2"
    #:result #xffffffff
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_LD_IMM64 R1 3)
    (BPF_LD_IMM64 R2 2)
    (BPF_JMP_REG BPF_JLE R2 R1 0)
    (BPF_LD_IMM64 R0 #xffffffffffffffff)
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JLE_X: ldimm64 test 3"
    #:result 1
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_LD_IMM64 R1 3)
    (BPF_LD_IMM64 R2 2)
    (BPF_JMP_REG BPF_JLE R2 R1 4)
    (BPF_LD_IMM64 R0 #xffffffffffffffff)
    (BPF_LD_IMM64 R0 #xeeeeeeeeeeeeeeee)
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JNE_X: if (3 != 2) return 1"
    #:result 1
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_LD_IMM64 R1 3)
    (BPF_LD_IMM64 R2 2)
    (BPF_JMP_REG BPF_JNE R1 R2 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JEQ_X: if (3 == 3) return 1"
    #:result 1
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_LD_IMM64 R1 3)
    (BPF_LD_IMM64 R2 3)
    (BPF_JMP_REG BPF_JEQ R1 R2 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JSET_X: if (#x3 & #x2) return 1"
    #:result 1
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_LD_IMM64 R1 3)
    (BPF_LD_IMM64 R2 2)
    (BPF_JMP_REG BPF_JSET R1 R2 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "JMP_JSET_X: if (#x3 & #xffffffff) return 1"
    #:result 1
    (BPF_ALU32_IMM BPF_MOV R0 0)
    (BPF_LD_IMM64 R1 3)
    (BPF_LD_IMM64 R2 #xffffffff)
    (BPF_JMP_REG BPF_JSET R1 R2 1)
    (BPF_EXIT_INSN)
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_EXIT_INSN))

  (bpf-test-case "JNE signed compare test 1"
    #:result 1
    (BPF_ALU32_IMM BPF_MOV R1 #xfefbbc12)
    (BPF_ALU32_IMM BPF_MOV R3 #xffff0000)
    (BPF_MOV64_REG R2 R1)
    (BPF_ALU64_REG BPF_AND R2 R3)
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_JMP_IMM BPF_JNE R2 -17104896 1)
    (BPF_ALU32_IMM BPF_MOV R0 2)
    (BPF_EXIT_INSN))

  (bpf-test-case "JNE signed compare test 2"
    #:result 1
    (BPF_ALU32_IMM BPF_MOV R1 #xfefbbc12)
    (BPF_ALU32_IMM BPF_MOV R3 #xffff0000)
    (BPF_MOV64_REG R2 R1)
    (BPF_ALU64_REG BPF_AND R2 R3)
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_JMP_IMM BPF_JNE R2 #xfefb0000 1)
    (BPF_ALU32_IMM BPF_MOV R0 2)
    (BPF_EXIT_INSN))

  (bpf-test-case "JNE signed compare test 3"
    #:result 2
    (BPF_ALU32_IMM BPF_MOV R1 #xfefbbc12)
    (BPF_ALU32_IMM BPF_MOV R3 #xffff0000)
    (BPF_ALU32_IMM BPF_MOV R4 #xfefb0000)
    (BPF_MOV64_REG R2 R1)
    (BPF_ALU64_REG BPF_AND R2 R3)
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_JMP_REG BPF_JNE R2 R4 1)
    (BPF_ALU32_IMM BPF_MOV R0 2)
    (BPF_EXIT_INSN))

  (bpf-test-case "JNE signed compare test 4"
    #:result 2
    (BPF_LD_IMM64 R1 -17104896)
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_JMP_IMM BPF_JNE R1 -17104896 1)
    (BPF_ALU32_IMM BPF_MOV R0 2)
    (BPF_EXIT_INSN))

  (bpf-test-case "JNE signed compare test 5"
    #:result 1
    (BPF_LD_IMM64 R1 #xfefb0000)
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_JMP_IMM BPF_JNE R1 #xfefb0000 1)
    (BPF_ALU32_IMM BPF_MOV R0 2)
    (BPF_EXIT_INSN))

  (bpf-test-case "JNE signed compare test 6"
    #:result 2
    (BPF_LD_IMM64 R1 #x7efb0000)
    (BPF_ALU32_IMM BPF_MOV R0 1)
    (BPF_JMP_IMM BPF_JNE R1 #x7efb0000 1)
    (BPF_ALU32_IMM BPF_MOV R0 2)
    (BPF_EXIT_INSN))))

(module+ test
  (time (run-tests bpf-tests)))
